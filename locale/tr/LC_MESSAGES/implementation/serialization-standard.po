# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# 
# Translators:
# ilker <bilkerarslan40@gmail.com>, 2021
# Muhammet Kara <muhammet.kara@metu.edu.tr>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: 2021-06-26 21:48+0000\n"
"Last-Translator: Muhammet Kara <muhammet.kara@metu.edu.tr>, 2021\n"
"Language-Team: Turkish (https://www.transifex.com/caspernetwork/teams/122124/tr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: tr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../implementation/serialization-standard.rst:4
msgid "Serialization Standard"
msgstr "Serileştirme Standardı"

#: ../../implementation/serialization-standard.rst:5
msgid ""
"We provide a custom implementation to serialize data structures used by the "
"Casper node to their byte representation. This document details how this "
"custom serialization is implemented, allowing developers to build a library "
"that implements the custom serialization."
msgstr ""
"Casper düğümü tarafından kullanılan veri yapılarını bayt gösterimlerine göre"
" serileştirmek için özel bir uygulama sağlıyoruz. Bu belge, bu özel "
"serileştirmenin nasıl uygulandığını ayrıntılarıyla anlatarak "
"geliştiricilerin özel serileştirmeyi uygulayan bir kitaplık oluşturmasına "
"olanak tanır."

#: ../../implementation/serialization-standard.rst:11
msgid "Block"
msgstr "Blok"

#: ../../implementation/serialization-standard.rst:12
msgid ""
"A block is the core component of the Casper linear blockchain, used in two "
"contexts:"
msgstr ""
"Bir blok, Casper doğrusal blokzinciri için temel bir bileşendir, iki "
"bağlamda kullanılır:"

#: ../../implementation/serialization-standard.rst:14
msgid ""
"A data structure containing a collection of transactions. Blocks form the "
"primary structure of the blockchain."
msgstr ""
"Bir işlem yığınını içeren bir veri yapısı. Bloklar, blokzincirin birincil "
"yapısını oluşturur."

#: ../../implementation/serialization-standard.rst:15
msgid ""
"A message that is exchanged between nodes containing the data structure as "
"explained in (1)."
msgstr ""
"(1)'de açıklandığı gibi veri yapısını içeren düğümler arasında değiş tokuş "
"edilen bir mesaj."

#: ../../implementation/serialization-standard.rst:17
msgid ""
"Each block has a globally unique ID, achieved by hashing the contents of the"
" block."
msgstr ""
"Her bloğun, bloğun içeriğinin özetinin alınmasıyla (hashing) elde edilen "
"global olarak benzersiz bir kimliği vardır."

#: ../../implementation/serialization-standard.rst:19
msgid ""
"Each block points to its parent. An exception is the first block, which has "
"no parent."
msgstr ""
"Her blok kendi üst ögesini işaret eder. İstisna ilk bloktur, onun hiçbir üst"
" ögesi yoktur."

#: ../../implementation/serialization-standard.rst:21
msgid "A block is structurally defined as follows:"
msgstr "Bir blok yapısal olarak şu şekilde tanımlanır:"

#: ../../implementation/serialization-standard.rst:23
msgid "``hash``: A hash over the header of the block."
msgstr "``hash``: Bloğun başlığı üzerinde bir özet (hash)."

#: ../../implementation/serialization-standard.rst:24
msgid ""
"``header``: The header of the block that contains information about the "
"contents of the block with additional metadata."
msgstr ""
"``header``: Ek meta verilerle bloğun içeriği hakkında bilgi içeren bloğun "
"başlığı."

#: ../../implementation/serialization-standard.rst:25
msgid ""
"``body``: The block's body contains the proposer of the block and hashes of "
"deploys and transfers contained within it."
msgstr ""
"``body``: Bloğun gövdesi, bloğu öneren kişiyi ve içinde bulunan dağıtımların"
" ve aktarımların özetlerini içerir."

#: ../../implementation/serialization-standard.rst:28
msgid "Block hash"
msgstr "Blok özeti"

#: ../../implementation/serialization-standard.rst:29
msgid ""
"The block hash is a ``Digest`` over the contents of the block Header. The "
"``BlockHash`` serializes as the byte representation of the hash itself."
msgstr ""
"Blok özeti, blok Başlığının içeriği üzerinde bir ``Özet``tir. ``BlockHash``,"
" özetin kendisini bayt gösterimi olarak seri hale getirilir."

#: ../../implementation/serialization-standard.rst:32
msgid "Block header"
msgstr "Blok başlığı"

#: ../../implementation/serialization-standard.rst:33
msgid "The header portion of a block, structurally, is defined as follows:"
msgstr "Bloğun başlık kısmı, yapısal olarak, şu şekilde tanımlanır:"

#: ../../implementation/serialization-standard.rst:35
msgid ""
"``parent_hash``: is the hash of the parent block. It serializes to the byte "
"representation of the parent hash. The serialized buffer of the "
"``parent_hash`` is 32 bytes long."
msgstr ""
"``parent_hash``: üst ögenin özetidir. Üst öge özetinin bayt gösterimine "
"serileştirilir. ``parent_hash``'in serileştirilmiş arabelleği 32 bayt "
"uzunluğundadır."

#: ../../implementation/serialization-standard.rst:36
msgid ""
"``state_root_hash``: is the global state root hash produced by executing "
"this block's body. It serializes to the byte representation of the ``state "
"root hash``. The serialized buffer of the ``state_root_hash`` is 32 bytes "
"long."
msgstr ""
"``state_root_hash``: bu bloğun gövdesini yürüterek üretilen küresel durum "
"kök özetidir. \"Durum kök özeti\"nin bayt gösterimini serileştirir. "
"``state_root_hash``nin serileştirilmiş arabelleği 32 bayt uzunluğundadır."

#: ../../implementation/serialization-standard.rst:37
msgid ""
"``body_hash``: the hash of the block body. It serializes to the byte "
"representation of the body hash. The serialized buffer of the ``body_hash`` "
"is 32 bytes long."
msgstr ""
"``body_hash``: blok gövdesinin özeti. Gövde özetinin bayt gösterimini seri "
"hale getirir. \"body_hash\"ın serileştirilmiş arabelleği 32 bayt "
"uzunluğundadır."

#: ../../implementation/serialization-standard.rst:38
msgid ""
"``random_bit``: is a boolean needed for initializing a future era. It is "
"serialized as a single byte; true maps to 1, while false maps to 0."
msgstr ""
"``random_bit``: gelecekteki bir dönemi başlatmak için gereken bir mantıksal "
"(boolean) değeridir. Tek bir bayt olarak serileştirilir; doğru eşlemeler "
"1'e, yanlış eşlemeler 0'a eşlenir."

#: ../../implementation/serialization-standard.rst:39
msgid ""
"``accumulated_seed``: A seed needed for initializing a future era. It "
"serializes to the byte representation of the parent Hash. The serialized "
"buffer of the ``accumulated_hash`` is 32 bytes long."
msgstr ""
"``accumulated_seed``: Gelecekteki bir dönemi başlatmak için gereken bir "
"tohum. Üst Öge Özet'in bayt gösterimini serileştirir. ``accumulated_hash``in"
" serileştirilmiş arabelleği 32 bayt uzunluğundadır."

#: ../../implementation/serialization-standard.rst:40
msgid ""
"``era_end``: contains equivocation and reward information to be included in "
"the terminal finalized block. It is an optional field. Thus if the field is "
"set as ``None``, it serializes to `0`. The serialization of the other case "
"is described in the :ref:`EraEnd<serialization-standard-era-end>` ."
msgstr ""
"``era_end``: kesinleştirilmiş terminal bloğuna dahil edilecek mükerrerlik ve"
" ödül bilgilerini içerir. İsteğe bağlı bir alandır. Böylece alan ``Yok`` "
"olarak ayarlanırsa, `0` olarak serileşir. Diğer durumun serileştirilmesi "
":ref:`EraEnd<serialization-standard-era-end>` içinde açıklanmıştır."

#: ../../implementation/serialization-standard.rst:41
msgid ""
"``timestamp``: The timestamp from when the block was proposed. It serializes"
" as a single ``u64`` value. The serialization of a ``u64`` value is "
"described in in the :ref:`CLValues<serialization-standard-values>` section."
msgstr ""
"``timestamp``: Bloğun önerildiği zamana ait zaman damgası. Tek bir ``u64`` "
"değeri olarak serileşir. Bir ``u64`` değerinin serileştirilmesi "
":ref:`CLValues<serialization-standard-values>`  bölümünde açıklanmıştır."

#: ../../implementation/serialization-standard.rst:42
msgid ""
"``era_id``: Era ID in which this block was created. It serializes as a "
"single ``u64`` value."
msgstr ""
"``era_id``: Bu bloğun oluşturulduğu dönem kimliği. Tek bir ``u64`` değeri "
"olarak serileşir."

#: ../../implementation/serialization-standard.rst:43
msgid ""
"``height``: The height of this block, i.e., the number of ancestors. It "
"serializes as a single ``u64`` value."
msgstr ""
"``height``: Bu bloğun yüksekliği, yani üst soyların sayısı. Tek bir ``u64`` "
"değeri olarak serileşir."

#: ../../implementation/serialization-standard.rst:44
msgid ""
"``protocol_version``: The version of the Casper network when this block was "
"proposed. It is 3-element tuple containing ``u32`` values. It serializes as "
"a buffer containing the three ``u32`` serialized values. Refer to the "
":ref:`CLValues<serialization-standard-values>` section on how ``u32`` values"
" are serialized."
msgstr ""
"``protocol_version``: Bu blok önerildiğinde Casper ağının sürümü. ``u32`` "
"değerleri içeren 3 elemanlı bir demettir. Serileştirilmiş üç ``u32`` "
"değerini içeren bir arabellek olarak serileştirilir. ``u32`` değerlerinin "
"nasıl serileştirildiğine ilişkin :ref:`CLValues<serialization-standard-"
"values>` bölümüne bakınız."

#: ../../implementation/serialization-standard.rst:50
msgid "EraEnd"
msgstr "EraEnd"

#: ../../implementation/serialization-standard.rst:51
msgid ""
"``EraEnd`` as represented within the block header, is a struct containing "
"two fields."
msgstr ""
"``EraEnd`` blok başlığında gösterildiği gibi, iki alan içeren bir yapıdır."

#: ../../implementation/serialization-standard.rst:53
msgid ""
"``era_report``: The first field is termed as ``EraReport`` and contains "
"information about equivocators and rewards for an era."
msgstr ""
"``era_report``: İlk alan ``EraReport`` olarak adlandırılır ve bir dönem için"
" çelişkililer ve ödüller hakkında bilgi içerir."

#: ../../implementation/serialization-standard.rst:54
msgid ""
"``next_era_validator_weights``: The second field is map for the validators "
"and their weights for the era to follow."
msgstr ""
"``next_era_validator_weights``: İkinci alan, doğrulayıcılar için harita ve "
"takip eden dönem için ağırlıklarıdır."

#: ../../implementation/serialization-standard.rst:56
msgid "``EraReport`` itself contains two fields:"
msgstr "``EraReport``'un kendi iki alan içerir:"

#: ../../implementation/serialization-standard.rst:58
msgid "``equivocators``: A vector of ``PublicKey``."
msgstr "``equivocators``: Bir ``PublicKey`` vektörü."

#: ../../implementation/serialization-standard.rst:59
msgid "``rewards``: A Binary Tree Map of ``PublicKey`` and ``u64``."
msgstr "``rewards``: ``PublicKey`` ve ``u64``ün İkili Kod Ağaç Haritası."

#: ../../implementation/serialization-standard.rst:61
msgid ""
"When serializing an EraReport, the buffer is first filled with the "
"individual serialization of the PublicKey contained within the vector."
msgstr ""
"Bir EraReport'u serileştirirken, arabellek ilk önce vektör içinde bulunan "
"PublicKey'in serileştirmesiyle doldurulur."

#: ../../implementation/serialization-standard.rst:63
msgid ""
"If the ``PublicKey`` is an ``Ed25519`` key, the first byte within the buffer"
" is a ``1`` followed by the individual bytes of the serialized key."
msgstr ""
"``PublicKey`` bir ``Ed25519`` anahtarıysa, arabellek içindeki ilk bayt bir "
"``1`` ve ardından serileştirilmiş anahtarın bireysel baytlarıdır."

#: ../../implementation/serialization-standard.rst:64
msgid ""
"If the ``PublicKey`` is an ``Secp256k1`` key, the first byte within the "
"buffer is a ``2`` followed by the individual bytes of the serialized key."
msgstr ""
"``PublicKey`` bir ``Secp256k1`` anahtarıysa, arabellek içindeki ilk bayt bir"
" ``2`` ve ardından serileştirilmiş anahtarın bireysel baytlarıdır."

#: ../../implementation/serialization-standard.rst:66
msgid ""
"When serializing the overarching struct of ``EraEnd``, we first allocate a "
"buffer, which contains the serialized representation of the ``EraReport`` as"
" described above, followed by the serialized BTreeMap."
msgstr ""
"``EraEnd``'in kapsayıcı yapısını serileştirirken, önce yukarıda açıklandığı "
"gibi ``EraReport``'un serileştirilmiş gösterimini ve ardından "
"serileştirilmiş BTreeMap'i içeren bir arabellek ayırırız."

#: ../../implementation/serialization-standard.rst:68
msgid ""
"Note that ``EraEnd`` is an optional field. Thus the above scheme only "
"applies if there is an ``EraEnd``; if there is no era end, the field simply "
"serializes to `0`."
msgstr ""
"``EraEnd`` isteğe bağlı bir alandır. Bu nedenle, yukarıdaki şema yalnızca "
"bir ``EraEnd`` varsa geçerlidir; dönem sonu yoksa, alan basitçe `0` olarak "
"serileştirilir."

#: ../../implementation/serialization-standard.rst:72
msgid "Body"
msgstr "Gövde (Body)"

#: ../../implementation/serialization-standard.rst:73
msgid "The body portion of the block is structurally defined as:"
msgstr "Bloğun gövde kısmı yapısal olarak şu şekilde tanımlanır:"

#: ../../implementation/serialization-standard.rst:76
msgid "``proposer``: The PublicKey which proposed this block."
msgstr "``proposer``: Bu bloğu öneren PublicKey."

#: ../../implementation/serialization-standard.rst:77
msgid ""
"``deploy_hashes``: Is a vector of hex-encoded hashes identifying Deploys "
"included in this block."
msgstr ""
"``deploy_hashes``: Bu bloğa dahil edilen Dağıtımları tanımlayan onaltılık "
"kodlu özetlerin bir vektörüdür."

#: ../../implementation/serialization-standard.rst:78
msgid ""
"``transfer_hashes``: Is a vector of hex-encoded hashes identifying Transfers"
" included in this block."
msgstr ""
"``transfer_hashes``: Bu bloğa dahil edilen Transferleri tanımlayan onaltılık"
" kodlu özetlerin bir vektörüdür."

#: ../../implementation/serialization-standard.rst:80
msgid ""
"When we serialize the ``BlockBody``, we create a buffer that contains the "
"serialized representations of the individual fields present within the "
"block."
msgstr ""
"``BlockBody``yi serileştirdiğimizde, blok içinde bulunan bireysel alanların "
"serileştirilmiş temsillerini içeren bir arabellek oluştururuz."

#: ../../implementation/serialization-standard.rst:82
msgid ""
"``proposer``: serializes to the byte representation of the ``PublicKey``. If"
" the ``PublicKey`` is an ``Ed25519`` key, then the first byte within the "
"serialized buffer is 1 followed by the bytes of the key itself; else, in the"
" case of ``Secp256k1``, the first byte is 2."
msgstr ""
"``proposer``:  ``PublicKey``'in bayt temsilini serileştirir.  ``PublicKey`` "
"bir ``Ed25519`` anahtarıysa, serileştirilmiş arabellek içindeki ilk bayt "
"1'dir ve ardından anahtarın baytları gelir; Aksi takdirde, ``Secp256k1`` "
"durumunda ilk bayt 2'dir."

#: ../../implementation/serialization-standard.rst:83
msgid ""
"``deploy_hashes``: serializes to the byte representation of all the "
"deploy_hashes within the block header. Its length is ``32 * n``, where n "
"denotes the number of deploy hashes present within the body."
msgstr ""
"``deploy_hashes``: blok başlığındaki tüm deploy_hashes'lerinin bayt "
"gösterimini serileştirir. Uzunluğu ``32 * n`` dir, burada n, gövde içinde "
"bulunan dağıtım özetlerinin sayısını gösterir."

#: ../../implementation/serialization-standard.rst:84
msgid ""
"``transfer_hashes``: serializes to the byte representation of all the "
"deploy_hashes within the block header. Its length is ``32 * n``, where n "
"denotes the number of transfers present within the body."
msgstr ""
"``transfer_hashes``: blok başlığındaki tüm deploy_hashes'lerinin bayt "
"gösterimini serileştirir. Uzunluğu ``32 * n`` dir, burada n, gövdede bulunan"
" transferlerin sayısını gösterir."

#: ../../implementation/serialization-standard.rst:90
#: ../../implementation/serialization-standard.rst:675
msgid "Deploy"
msgstr "Dağıtım"

#: ../../implementation/serialization-standard.rst:91
msgid ""
"A deploy is a data structure containing a smart contract and the requester's"
" signature(s). Additionally, the deploy header contains additional metadata "
"about the deploy itself. A deploy is structurally defined as follows:"
msgstr ""
"Dağıtım, akıllı bir kontratı ve istekte bulunanın imzasını/imzalarını içeren"
" bir veri yapısıdır. Ayrıca, dağıtımın başlığı, dağıtımın kendisi hakkında "
"ek meta veriler içerir. Bir dağıtım yapısal olarak şu şekilde tanımlanır:"

#: ../../implementation/serialization-standard.rst:95
msgid "``hash``: The hash of the deploy header."
msgstr "``hash``: Dağıtım başlığının özeti."

#: ../../implementation/serialization-standard.rst:96
msgid ""
"``header``: Contains metadata about the deploy. The structure of the header "
"is detailed further in this document."
msgstr ""
"``header``: Dağıtımla ilgili meta verileri içerir. Başlığın yapısı bu "
"belgede daha ayrıntılı olarak açıklanmıştır."

#: ../../implementation/serialization-standard.rst:97
msgid "``payment``: The payment code for contained smart contract."
msgstr "``payment``: Kapsanan akıllı kontrat için ödeme kodu."

#: ../../implementation/serialization-standard.rst:98
msgid "``session``: The stored contract itself."
msgstr "``session``: Saklanan kontratın kendisi."

#: ../../implementation/serialization-standard.rst:99
msgid "``approvals``: A list of signatures:"
msgstr "``approvals``: İmza listesi:"

#: ../../implementation/serialization-standard.rst:102
msgid "Deploy-Hash"
msgstr "Deploy-Hash"

#: ../../implementation/serialization-standard.rst:103
msgid ""
"The deploy hash is a digest over the contents of the deploy header. The "
"deploy hash serializes as the byte representation of the hash itself."
msgstr ""
"Dağıtım özeti, dağıtım başlığının içeriği üzerinde bir özettir. Dağıtım "
"özeti, özetin kendisinin bayt gösterimi olarak seri hale getirilir."

#: ../../implementation/serialization-standard.rst:106
msgid "Deploy-Header"
msgstr "Deploy-Header"

#: ../../implementation/serialization-standard.rst:108
msgid ""
"``account``: A supported public key variant (currently either ``Ed25519`` or"
" ``Secp256k1``). An ``Ed25519`` key is serialized as a buffer of bytes, with"
" the leading byte being ``1`` for ``Ed25519``, with remainder of the buffer "
"containing the byte representation of the signature. Correspondingly, a "
"``Secp256k1`` key is serialized as a buffer of bytes, with the leading byte "
"being ``2``."
msgstr ""
"``account``: Desteklenen bir ortak anahtar değişkeni (şu anda ``Ed25519`` "
"veya ``Secp256k1``). Bir ``Ed25519`` anahtarı, bayt arabelleği olarak "
"serileştirilir; baştaki bayt, ``Ed25519`` için ``1`` olur ve arabelleğin "
"geri kalanı imzanın bayt gösterimini içerir. Buna uygun olarak, bir "
"``Secp256k1`` anahtarı, baştaki bayt ``2`` olacak şekilde bir bayt "
"arabelleği olarak serileştirilir."

#: ../../implementation/serialization-standard.rst:109
msgid ""
"``timestamp``: A timestamp is a struct that is a unary tuple containing a "
"``u64`` value. This value is a count of the milliseconds since the UNIX "
"epoch. Thus the value ``1603994401469`` serializes as ``0xbd3a847575010000``"
msgstr ""
"``timestamp``: Zaman damgası, ``u64`` değeri içeren tekli demet bir yapıdır."
" Bu değer, UNIX döneminden bu yana geçen milisaniyelerin bir sayısıdır. "
"Böylece ``1603994401469`` değeri ``0xbd3a847575010000`` olarak "
"serileştirilir."

#: ../../implementation/serialization-standard.rst:110
msgid ""
"``ttl``: The **Time to live** is defined as the amount of time for which "
"deploy is considered valid. The ``ttl`` serializes in the same manner as the"
" timestamp."
msgstr ""
"``ttl``: **Yaşama süresi**, dağıtımın geçerli olduğu kabul edilen süre "
"olarak tanımlanır. ``ttl``, zaman damgasıyla aynı şekilde serileştirilir."

#: ../../implementation/serialization-standard.rst:111
msgid ""
"``gas_price``: The gas is ``u64`` value which is serialized as ``u64`` "
"CLValue discussed below."
msgstr ""
"``gas_price``: Gaz, aşağıda tartışılan ``u64`` CLValue olarak "
"serileştirilmiş ``u64`` değeridir."

#: ../../implementation/serialization-standard.rst:112
msgid ""
"``body_hash``: Body hash is a hash over the contents of the deploy body, "
"which includes the payment, session, and approval fields. Its serialization "
"is the byte representation of the hash itself."
msgstr ""
"``body_hash``: Gövde özeti, ödeme, oturum ve onay alanlarını içeren dağıtım "
"gövdesinin içeriği üzerindeki bir özettir. Serileştirmesi, özetin kendisinin"
" bayt gösterimidir."

#: ../../implementation/serialization-standard.rst:113
msgid ""
"``dependencies``: Dependencies is a vector of deploy hashes referencing "
"deploys that must execute before the current deploy can be executed. It "
"serializes as a buffer containing the individual serialization of each "
"DeployHash within the Vector."
msgstr ""
"``dependencies``: Bağımlılıklar, geçerli dağıtım yürütülmeden önce "
"yürütülmesi gereken dağıtmlara atıfta bulunan dağıtım özetlerinin bir "
"vektörüdür. Vektör içindeki her DeployHash'in bireysel serileştirmesini "
"içeren bir arabellek olarak seri hale getirir."

#: ../../implementation/serialization-standard.rst:114
msgid ""
"``chain_name``: Chain name is a human-readable string describing the name of"
" the chain as detailed in the chainspec. It is serialized as a String "
"CLValue described below."
msgstr ""
"``chain_name``: Zincir adı, zincir belirtiminde ayrıntılı olarak açıklandığı"
" şekilde zincirin adını açıklayan, okunabilen bir dizedir. Aşağıda "
"açıklandığı şekilde, bir String CLValue olarak serileştirilir."

#: ../../implementation/serialization-standard.rst:117
msgid "Payment & Session"
msgstr "Ödeme ve Oturum"

#: ../../implementation/serialization-standard.rst:119
msgid ""
"Payment and Session are both defined as ``ExecutableDeployItems``. "
"``ExecutableDeployItems`` is an enum described as follows:"
msgstr ""
"Ödeme ve Oturum, ``ExecutableDeployItems`` olarak tanımlanır. "
"``ExecutableDeployItems`` aşağıdaki şekilde açıklanan bir numaralandırmadır:"

#: ../../implementation/serialization-standard.rst:166
msgid ""
"Module Bytes are serialized such that the first byte within the serialized "
"buffer is ``0`` with the rest of the buffer containing the bytes present."
msgstr ""
"Modül Baytları, serileştirilmiş arabellek içindeki ilk bayt ``0`` olacak ve "
"arabelleğin geri kalanı mevcut baytları içerecek şekilde serileştirilir."

#: ../../implementation/serialization-standard.rst:168
msgid ""
"``ModuleBytes { module_bytes: \"[72 bytes]\", args: "
"434705a38470ec2b008bb693426f47f330802f3bd63588ee275e943407649d3bab1898897ab0400d7fa09fe02ab7b7e8ea443d28069ca557e206916515a7e21d15e5be5eb46235f5"
" }`` will serialize to"
msgstr ""
"``ModuleBytes { module_bytes: \"[72 bytes]\", args: "
"434705a38470ec2b008bb693426f47f330802f3bd63588ee275e943407649d3bab1898897ab0400d7fa09fe02ab7b7e8ea443d28069ca557e206916515a7e21d15e5be5eb46235f5"
" }`` şu şekilde serileştirilir"

#: ../../implementation/serialization-standard.rst:169
msgid ""
"``0x0048000000420481b0d5a665c8a7678398103d4333c684461a71e9ee2a13f6e859fb6cd419ed5f8876fc6c3e12dce4385acc777edf42dcf8d8d844bf6a704e5b2446750559911a4a328d649ddd48000000434705a38470ec2b008bb693426f47f330802f3bd63588ee275e943407649d3bab1898897ab0400d7fa09fe02ab7b7e8ea443d28069ca557e206916515a7e21d15e5be5eb46235f5``"
msgstr ""
"``0x0048000000420481b0d5a665c8a7678398103d4333c684461a71e9ee2a13f6e859fb6cd419ed5f8876fc6c3e12dce4385acc777edf42dcf8d8d844bf6a704e5b2446750559911a4a328d649ddd48000000434705a38470ec2b008bb693426f47f330802f3bd63588ee275e943407649d3bab1898897ab0400d7fa09fe02ab7b7e8ea443d28069ca557e206916515a7e21d15e5be5eb46235f5``"

#: ../../implementation/serialization-standard.rst:171
msgid ""
"StoredContractByHash serializes such that the first byte within the "
"serialized buffer is 1u8. This is followed by the byte representation of the"
" remaining fields."
msgstr ""
"StoredContractByHash, serileştirilmiş arabellek içindeki ilk bayt 1u8 olacak"
" şekilde serileştirir. Bunu, kalan alanların bayt gösterimi takip eder."

#: ../../implementation/serialization-standard.rst:173
msgid ""
"``StoredContractByHash { hash: "
"c4c411864f7b717c27839e56f6f1ebe5da3f35ec0043f437324325d65a22afa4, "
"entry_point: \"pclphXwfYmCmdITj8hnh\", args: "
"d8b59728274edd2334ea328b3292ed15eaf9134f9a00dce31a87d9050570fb0267a4002c85f3a8384d2502733b2e46f44981df85fed5e4854200bbca313e3bca8d888a84a76a1c5b1b3d236a12401a2999d3cad003c9b9d98c92ab1850"
" }``"
msgstr ""
"``StoredContractByHash { hash: "
"c4c411864f7b717c27839e56f6f1ebe5da3f35ec0043f437324325d65a22afa4, "
"entry_point: \"pclphXwfYmCmdITj8hnh\", args: "
"d8b59728274edd2334ea328b3292ed15eaf9134f9a00dce31a87d9050570fb0267a4002c85f3a8384d2502733b2e46f44981df85fed5e4854200bbca313e3bca8d888a84a76a1c5b1b3d236a12401a2999d3cad003c9b9d98c92ab1850"
" }``"

#: ../../implementation/serialization-standard.rst:174
msgid ""
"``0x01c4c411864f7b717c27839e56f6f1ebe5da3f35ec0043f437324325d65a22afa41400000070636c7068587766596d436d6449546a38686e685d000000d8b59728274edd2334ea328b3292ed15eaf9134f9a00dce31a87d9050570fb0267a4002c85f3a8384d2502733b2e46f44981df85fed5e4854200bbca313e3bca8d888a84a76a1c5b1b3d236a12401a2999d3cad003c9b9d98c92ab1850``"
msgstr ""
"``0x01c4c411864f7b717c27839e56f6f1ebe5da3f35ec0043f437324325d65a22afa41400000070636c7068587766596d436d6449546a38686e685d000000d8b59728274edd2334ea328b3292ed15eaf9134f9a00dce31a87d9050570fb0267a4002c85f3a8384d2502733b2e46f44981df85fed5e4854200bbca313e3bca8d888a84a76a1c5b1b3d236a12401a2999d3cad003c9b9d98c92ab1850``"

#: ../../implementation/serialization-standard.rst:176
msgid ""
"StoredContractByName serializes such that the first byte within the "
"serialized buffer is 2u8. This is followed by the individual byte "
"representation of the remaining fields."
msgstr ""
"StoredContractByName, serileştirilmiş arabellek içindeki ilk bayt 2u8 olacak"
" şekilde seri hale getirir. Bunu, kalan alanların tekil bayt gösterimi takip"
" eder."

#: ../../implementation/serialization-standard.rst:178
msgid ""
"``StoredContractByName { name: \"U5A74bSZH8abT8HqVaK9\", entry_point: "
"\"gIetSxltnRDvMhWdxTqQ\", args: 07beadc3da884faa17454a }``"
msgstr ""
"``StoredContractByName { name: \"U5A74bSZH8abT8HqVaK9\", entry_point: "
"\"gIetSxltnRDvMhWdxTqQ\", args: 07beadc3da884faa17454a }``"

#: ../../implementation/serialization-standard.rst:179
msgid ""
"``0x0214000000553541373462535a483861625438487156614b39140000006749657453786c746e5244764d685764785471510b00000007beadc3da884faa17454a``"
msgstr ""
"``0x0214000000553541373462535a483861625438487156614b39140000006749657453786c746e5244764d685764785471510b00000007beadc3da884faa17454a``"

#: ../../implementation/serialization-standard.rst:181
msgid ""
"StoredVersionedContractByHash serializes such that the first byte within the"
" serialized buffer is 3u8. However, the field version within the enum "
"serializes as an Option CLValue, i.e., if the value is None as shown in the "
"example, it serializes to 0, else it serializes the inner u32 value, which "
"is described below."
msgstr ""
"StoredVersionedContractByHash, serileştirilmiş arabellek içindeki ilk bayt "
"3u8 olacak şekilde serileştirir. Ancak, numaralandırma içindeki alan sürümü "
"bir Option CLValue olarak serileştirilir, yani değer örnekte gösterildiği "
"gibi None ise 0'a serileştirilir, aksi takdirde aşağıda açıklanan iç u32 "
"değerini serileştirir."

#: ../../implementation/serialization-standard.rst:183
msgid ""
"``StoredVersionedContractByHash { hash: "
"b348fdd0d0b3f66468687df93141b5924f6bb957d5893c08b60d5a78d0b9a423, version: "
"None, entry_point: \"PsLz5c7JsqT8BK8ll0kF\", args: "
"3d0d7f193f70740386cb78b383e2e30c4f976cf3fa834bafbda4ed9dbfeb52ce1777817e8ed8868cfac6462b7cd31028aa5a7a60066db35371a2f8"
" }``"
msgstr ""
"``StoredVersionedContractByHash { hash: "
"b348fdd0d0b3f66468687df93141b5924f6bb957d5893c08b60d5a78d0b9a423, version: "
"None, entry_point: \"PsLz5c7JsqT8BK8ll0kF\", args: "
"3d0d7f193f70740386cb78b383e2e30c4f976cf3fa834bafbda4ed9dbfeb52ce1777817e8ed8868cfac6462b7cd31028aa5a7a60066db35371a2f8"
" }``"

#: ../../implementation/serialization-standard.rst:184
msgid ""
"``0x03b348fdd0d0b3f66468687df93141b5924f6bb957d5893c08b60d5a78d0b9a423001400000050734c7a3563374a73715438424b386c6c306b463b0000003d0d7f193f70740386cb78b383e2e30c4f976cf3fa834bafbda4ed9dbfeb52ce1777817e8ed8868cfac6462b7cd31028aa5a7a60066db35371a2f8``"
msgstr ""
"``0x03b348fdd0d0b3f66468687df93141b5924f6bb957d5893c08b60d5a78d0b9a423001400000050734c7a3563374a73715438424b386c6c306b463b0000003d0d7f193f70740386cb78b383e2e30c4f976cf3fa834bafbda4ed9dbfeb52ce1777817e8ed8868cfac6462b7cd31028aa5a7a60066db35371a2f8``"

#: ../../implementation/serialization-standard.rst:186
msgid ""
"StoredVersionedContractByName serializes such that the first byte within the"
" serialized buffer is 4u8. The name and entry_point are serialized as a "
"String CLValue, with the Option version field serializing to 0 if the value "
"is None; else, it serializes the inner u32 value as described below."
msgstr ""
"StoredVersionedContractByName, serileştirilmiş arabellek içindeki ilk bayt "
"4u8 olacak şekilde seri hale gelir. Ad ve entry_point, değer Yok ise, Option"
" sürümü alanı 0'a seri hale getirilerek bir String CLValue olarak "
"serileştirilir; Aksi takdirde, aşağıda açıklandığı gibi iç u32 değerini "
"serileştirir."

#: ../../implementation/serialization-standard.rst:188
msgid ""
"``StoredVersionedContractByName { name: \"lWJWKdZUEudSakJzw1tn\", version: "
"Some(1632552656), entry_point: \"S1cXRT3E1jyFlWBAIVQ8\", args: "
"9975e6957ea6b07176c7d8471478fb28df9f02a61689ef58234b1a3cffaebf9f303e3ef60ae0d8"
" }``"
msgstr ""
"``StoredVersionedContractByName { name: \"lWJWKdZUEudSakJzw1tn\", version: "
"Some(1632552656), entry_point: \"S1cXRT3E1jyFlWBAIVQ8\", args: "
"9975e6957ea6b07176c7d8471478fb28df9f02a61689ef58234b1a3cffaebf9f303e3ef60ae0d8"
" }``"

#: ../../implementation/serialization-standard.rst:189
msgid ""
"``0x04140000006c574a574b645a5545756453616b4a7a7731746e01d0c64e61140000005331635852543345316a79466c57424149565138270000009975e6957ea6b07176c7d8471478fb28df9f02a61689ef58234b1a3cffaebf9f303e3ef60ae0d8``"
msgstr ""
"``0x04140000006c574a574b645a5545756453616b4a7a7731746e01d0c64e61140000005331635852543345316a79466c57424149565138270000009975e6957ea6b07176c7d8471478fb28df9f02a61689ef58234b1a3cffaebf9f303e3ef60ae0d8``"

#: ../../implementation/serialization-standard.rst:191
msgid ""
"Transfer serializes such that the first byte within the serialized buffer "
"contains is 5u8, with the remaining bytes of the buffer containing the bytes"
" contained within the args field of Transfer."
msgstr ""
"Transfer, serileştirilmiş arabelleğin içerdiği ilk bayt 5u8 olacak ve "
"arabelleğin kalan baytları Transfer'in args alanında bulunan baytları "
"içerecek şekilde serileştirir."

#: ../../implementation/serialization-standard.rst:194
msgid "Approval"
msgstr "Onay"

#: ../../implementation/serialization-standard.rst:196
msgid "Approval contains two fields:"
msgstr "Onay iki alan içerir:"

#: ../../implementation/serialization-standard.rst:198
msgid ""
"``signer``: The public key of the approvals signer. It serializes to the "
"byte representation of the ``PublicKey``. If the ``PublicKey`` is an "
"``Ed25519`` key, then the first byte within the serialized buffer is 1 "
"followed by the bytes of the key itself; else, in the case of ``Secp256k1``,"
" the first byte is 2."
msgstr ""
"``signer``: Onayları imzalayanın ortak anahtarı. ``PublicKey``'in bayt "
"gösterimine serileşir. ``PublicKey`` bir ``Ed25519`` anahtarıysa, "
"serileştirilmiş arabellek içindeki ilk bayt 1'dir ve ardından anahtarın "
"baytları gelir; Aksi takdirde, ``Secp256k1`` durumunda ilk bayt 2'dir."

#: ../../implementation/serialization-standard.rst:199
msgid ""
"``signature``: The approval signature, which serializes as the byte "
"representation of the ``Signature``. The fist byte within the signature is 1"
" in the case of an ``Ed25519`` signature or 2 in the case of ``Secp256k1``."
msgstr ""
"``signature``: ``signature``'nın bayt temsili olarak seri hale getirilen "
"onay imzası. İmza içindeki ilk bayt, ``Ed25519```imzası olması durumunda 1 "
"veya ``Secp256k1`` olması durumunda 2'dir."

#: ../../implementation/serialization-standard.rst:203
msgid "Deploy Serialization at High Level"
msgstr "Yüksek Düzeyde Dağıtım Serileştirme"

#: ../../implementation/serialization-standard.rst:205
msgid "Consider the following deploy:"
msgstr "Aşağıdaki dağıtımı göz önünde bulundurun:"

#: ../../implementation/serialization-standard.rst:260
msgid "The above deploy will serialize to:"
msgstr "Yukarıdaki dağıtım şu şekilde seri hale getirilecektir:"

#: ../../implementation/serialization-standard.rst:262
msgid ""
"``01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900ca856a4d37501000080ee36000000000001000000000000004811966d37fe5674a8af4001884ea0d9042d1c06668da0c963769c3a01ebd08f0100000001010101010101010101010101010101010101010101010101010101010101010e0000006361737065722d6578616d706c6501da3c604f71e0e7df83ff1ab4ef15bb04de64ca02e3d2b78de6950e8b5ee187020e0000006361737065722d6578616d706c65130000006578616d706c652d656e7472792d706f696e7401000000080000007175616e7469747904000000e803000001050100000006000000616d6f756e7404000000e8030000010100000001d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c012dbf03817a51794a8e19e0724884075e6d1fbec326b766ecfa6658b41f81290da85e23b24e88b1c8d9761185c961daee1adab0649912a6477bcd2e69bd91bd08``"
msgstr ""
"``01d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900ca856a4d37501000080ee36000000000001000000000000004811966d37fe5674a8af4001884ea0d9042d1c06668da0c963769c3a01ebd08f0100000001010101010101010101010101010101010101010101010101010101010101010e0000006361737065722d6578616d706c6501da3c604f71e0e7df83ff1ab4ef15bb04de64ca02e3d2b78de6950e8b5ee187020e0000006361737065722d6578616d706c65130000006578616d706c652d656e7472792d706f696e7401000000080000007175616e7469747904000000e803000001050100000006000000616d6f756e7404000000e8030000010100000001d9bf2148748a85c89da5aad8ee0b0fc2d105fd39d41a4c796536354f0ae2900c012dbf03817a51794a8e19e0724884075e6d1fbec326b766ecfa6658b41f81290da85e23b24e88b1c8d9761185c961daee1adab0649912a6477bcd2e69bd91bd08``"

#: ../../implementation/serialization-standard.rst:268
msgid "Values"
msgstr "Değerler"

#: ../../implementation/serialization-standard.rst:270
msgid ""
"A value stored in the global state is a ``StoredValue``. A ``StoredValue`` "
"is one of three possible variants:"
msgstr ""
"Küresel durumda depolanan bir değer, bir ``StoredValue``'dur. Bir "
"``StoredValue``, üç olası değişkenden biridir:"

#: ../../implementation/serialization-standard.rst:272
msgid "A ``CLValue``"
msgstr "Bir ``CLValue``"

#: ../../implementation/serialization-standard.rst:273
msgid "A contract"
msgstr "Bir kontrat"

#: ../../implementation/serialization-standard.rst:274
msgid "An account"
msgstr "Bir hesap"

#: ../../implementation/serialization-standard.rst:276
msgid ""
"We discuss ``CLValue`` and contract in more detail below. Details about "
"accounts can be found in :ref:`accounts-head`."
msgstr ""
"``CLValue`` ve sözleşmeyi aşağıda daha ayrıntılı olarak tartışıyoruz. "
"Hesaplarla ilgili ayrıntılar :ref:`accounts-head` içinde bulunabilir."

#: ../../implementation/serialization-standard.rst:279
msgid ""
"Each ``StoredValue`` is serialized when written to the global state. The "
"serialization format consists of a single byte tag, indicating which variant"
" of ``StoredValue`` it is, followed by the serialization of that variant.  "
"The tag for each variant is as follows:"
msgstr ""
"Her ``StoredValue``, küresel duruma yazıldığında serileştirilir. "
"Serileştirme formatı, hangi ``StoredValue`` varyantı olduğunu  gösteren "
"tekil bir bayt etiketinden oluşur ve ardından bu varyantın serileştirilmesi "
"gelir. Her varyant için etiket aşağıdaki gibidir:"

#: ../../implementation/serialization-standard.rst:284
msgid "``CLValue`` is ``0``"
msgstr "``CLValue``, ``0``'dır"

#: ../../implementation/serialization-standard.rst:285
msgid "``Account`` is ``1``"
msgstr "``Account``, ``1``'dir"

#: ../../implementation/serialization-standard.rst:286
msgid "``Contract`` is ``2``"
msgstr "``Contract``, ``2``'dir"

#: ../../implementation/serialization-standard.rst:288
msgid ""
"The details of ``CLType`` serialization are in the following section. Using "
"the serialization format for ``CLValue`` as a basis, we can succinctly write"
" the serialization rules for contracts and accounts:"
msgstr ""
"``CLType`` serileştirme detayları aşağıdaki bölümdedir. ``CLValue`` için "
"serileştirme formatını temel alarak, kontratlar ve hesaplar için "
"serileştirme kurallarını kısaca yazabiliriz:"

#: ../../implementation/serialization-standard.rst:290
msgid ""
"contracts serialize in the same way as data with ``CLType`` equal to "
"``Tuple3(List(U8), Map(String, Key), Tuple3(U32, U32, U32))``;"
msgstr ""
"kontratlar, ```CLType``, ``Tuple3(List(U8), Map(String, Key), Tuple3(U32, "
"U32, U32))``'ye eşit olduğu verilerle aynı şekilde serileştirilir;"

#: ../../implementation/serialization-standard.rst:293
msgid ""
"accounts serialize in the same way as data with ``CLType`` equal to "
"``Tuple5(FixedList(U8, 32), Map(String, Key), URef, Map(FixedList(U8, 32), "
"U8), Tuple2(U8, U8))``."
msgstr ""
"kontratlar, ``CLType``, ``Tuple5(FixedList(U8, 32), Map(String, Key), URef, "
"Map(FixedList(U8, 32), U8), Tuple2(U8, U8))``'e eşit olduğu verilerle aynı "
"şekilde serileştirilir;"

#: ../../implementation/serialization-standard.rst:296
msgid ""
"Note: ``Tuple5`` is not a presently supported ``CLType``. However, it is "
"clear how to generalize the rules for ``Tuple1``, ``Tuple2``, ``Tuple3`` to "
"any size tuple."
msgstr ""
"Not: ``Tuple5``, şu anda desteklenen bir ``CLType`` değildir. Ancak, "
"``Tuple1``, ``Tuple2``, ``Tuple3`` için kuralların herhangi bir boyuttaki "
"demete nasıl genelleştirileceği açıktır."

#: ../../implementation/serialization-standard.rst:298
msgid ""
"Note: links to further serialization examples and a reference implementation"
" are found in :ref:`Appendix B <appendix-b>`."
msgstr ""
"Not: daha fazla serileştirme örneklerine ve bir referans uygulamasına "
"bağlantılar :ref:`Appendix B <appendix-b>1` 'de bulunur."

#: ../../implementation/serialization-standard.rst:301
msgid "``CLValue``"
msgstr "``CLValue``"

#: ../../implementation/serialization-standard.rst:303
msgid ""
"``CLValue`` is used to describe data that is used by smart contracts. This "
"could be as a local state variable, input argument, or return value. A "
"``CLValue`` consists of two parts: a ``CLType`` describing the type of the "
"value and an array of bytes representing the data in our serialization "
"format."
msgstr ""
"``CLValue``, akıllı kontratlar tarafından kullanılan verileri tanımlamak "
"için kullanılır. Bu, yerel durum değişkeni, girdi argümanı veya dönüş değeri"
" olabilir. Bir ``CLValue`` iki bölümden oluşur: değerin türünü açıklayan bir"
" ``CLType`` ve serileştirme biçimimizdeki verileri temsil eden bir bayt "
"dizisi."

#: ../../implementation/serialization-standard.rst:305
msgid "``CLType`` is described by the following recursive data type:"
msgstr "``CLType`` aşağıdaki özyinelemeli veri türüyle tanımlanır:"

#: ../../implementation/serialization-standard.rst:337
msgid ""
"All data which can be assigned a (non-``Any``) ``CLType`` can be serialized "
"according to the following rules (this defines the Casper serialization "
"format):"
msgstr ""
"(``Any`` olmayan) bir ``CLType`` atanabilen tüm veriler aşağıdaki kurallara "
"göre serileştirilebilir (bu, Casper serileştirme biçimini tanımlar):"

#: ../../implementation/serialization-standard.rst:340
msgid ""
"Boolean values serialize as a single byte; ``true`` maps to ``1``, while "
"``false`` maps to ``0``."
msgstr ""
"Boolean değerler tekil bir bayt olarak serileştirilir; ``true``, ``1`` ile "
"eşlenirken ``false``, ``0`` ile eşlenir."

#: ../../implementation/serialization-standard.rst:342
msgid ""
"Numeric values consisting of 64 bits or less serialize in the two's "
"complement representation with little-endian byte order, and the appropriate"
" number of bytes for the bit-width."
msgstr ""
"64 bit veya daha azından oluşan sayısal değerler, düşük son haneli bayt "
"sırası ve bit genişliği için uygun sayıda bayt ile ikiye tümleyen "
"gösteriminde serileştirilir."

#: ../../implementation/serialization-standard.rst:346
msgid "E.g. ``7u8`` serializes as ``0x07``"
msgstr "Örneğin, ``7u8``, ``0x07`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:347
msgid "E.g. ``7u32`` serializes as ``0x07000000``"
msgstr "Örneğin, ``7u32``, ``0x07000000`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:348
msgid "E.g. ``1024u32`` serializes as ``0x00040000``"
msgstr "Örneğin, ``1024u32``, ``0x00040000`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:350
msgid ""
"Wider numeric values (i.e. ``U128``, ``U256``, ``U512``) serialize as one "
"byte given the length of the next number (in bytes), followed by the two's "
"complement representation with little-endian byte order. The number of bytes"
" should be chosen as small as possible to represent the given number. This "
"is done to reduce the serialization size when small numbers are represented "
"within a wide data type."
msgstr ""
"Daha geniş sayısal değerler (yani ``U128``, ``U256``, ``U512``), sonraki "
"sayının uzunluğu (bayt cinsinden) verilen bir bayt olarak serileştirilir, "
"ardından düşük son haneli bayt sıralamasında ikiye tümleyen gösterimi takip "
"eder. Bayt sayısı, verilen sayıyı temsil etmek için mümkün olduğunca küçük "
"seçilmelidir. Bu, geniş bir veri türünde küçük sayılar temsil edildiğinde "
"serileştirme boyutunu azaltmak için yapılır."

#: ../../implementation/serialization-standard.rst:352
msgid "E.g. ``U512::from(7)`` serializes as ``0x0107``"
msgstr "Örneğin, ``U512::from(7)``, ``0x0107`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:353
msgid "E.g. ``U512::from(1024)`` serializes as ``0x020004``"
msgstr "Örneğin, ``U512::from(1024)``, ``0x020004`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:354
msgid ""
"E.g. ``U512::from(\"123456789101112131415\")`` serializes as "
"``0x0957ff1ada959f4eb106``"
msgstr ""
"Örneğin, ``U512::from(\"123456789101112131415\")``, "
"``0x0957ff1ada959f4eb106`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:356
msgid "Unit serializes to an empty byte array."
msgstr "Birim boş bir bayt dizisine serileştirilir."

#: ../../implementation/serialization-standard.rst:358
msgid ""
"Strings serialize as a 32-bit integer representing the length in bytes "
"(note: this might be different than the number of characters since special "
"characters, such as emojis, take more than one byte), followed by the UTF-8 "
"encoding of the characters in the string."
msgstr ""
"Dizeler, uzunluğu bayt cinsinden temsil eden 32 bitlik bir tam sayı olarak "
"serileştirilir (not: emojiler gibi özel karakterler birden fazla bayt "
"aldığından bu, karakter sayısından farklı olabilir), ardından dizide "
"karakterlerin UTF-8 kodlaması gelir."

#: ../../implementation/serialization-standard.rst:360
msgid ""
"E.g. ``\"Hello, World!\"`` serializes as "
"``0x0d00000048656c6c6f2c20576f726c6421``"
msgstr ""
"Örneğin. ``\"Hello, World!\"``` 0x0d00000048656c6c6f2c20576f726c6421`` "
"olarak seri hale getirilir"

#: ../../implementation/serialization-standard.rst:362
msgid ""
"Optional values serialize with a single byte tag, followed by the "
"serialization of the value itself. The tag is equal to ``0`` if the value is"
" missing, and ``1`` if it is present."
msgstr ""
"İsteğe bağlı değerler, tekil bir bayt etiketiyle serileştirilir, ardından "
"değerin kendisinin serileştirilmesi gelir. Etiket, değer yoksa ``0``, varsa "
"``1`` değerine eşittir."

#: ../../implementation/serialization-standard.rst:365
msgid "E.g. ``None`` serializes as ``0x00``"
msgstr "Örneğin, ``None``, ``0x00`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:366
msgid "E.g. ``Some(10u32)`` serializes as ``0x010a000000``"
msgstr "Örneğin, ``Some(10u32)``, ``0x010a000000`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:368
msgid ""
"A list of values serializes as a 32-bit integer representing the number of "
"elements in the list (note this differs from strings where it gives the "
"number of *bytes*), followed by the concatenation of each serialized "
"element."
msgstr ""
"Değerler listesi, listedeki öğelerin sayısını temsil eden 32 bitlik bir tam "
"sayı olarak serileştirilir (bunun, *bayt* sayısını verdiği dizelerden farklı"
" olduğunu unutmayın), ardından her serileştirilmiş öğenin bitiştirilmesi "
"gelir."

#: ../../implementation/serialization-standard.rst:372
msgid "E.g. ``List()`` serializes as ``0x00000000``"
msgstr "Örneğin, ``List()``, ``0x00000000`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:373
msgid ""
"E.g. ``List(1u32, 2u32, 3u32)`` serializes as "
"``0x03000000010000000200000003000000``"
msgstr ""
"Örneğin, ``List(1u32, 2u32, 3u32)``, ``0x03000000010000000200000003000000`` "
"olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:375
msgid ""
"A fixed-length list of values serializes as the concatenation of the "
"serialized elements. Unlike a variable-length list, the length is not "
"included in the serialization because it is statically known by the type of "
"the value."
msgstr ""
"Sabit uzunlukta bir değerler listesi, serileştirilmiş öğelerin "
"birleştirilmesi olarak serileştirilir. Değişken uzunluklu bir listeden "
"farklı olarak, uzunluk, değer türüne göre statik olarak bilindiği için "
"serileştirmeye dahil edilmez."

#: ../../implementation/serialization-standard.rst:377
msgid ""
"E.g. ``[1u32, 2u32, 3u32]`` serializes as ``0x010000000200000003000000``"
msgstr ""
"Örneğin, ``[1u32, 2u32, 3u32]``, ``0x010000000200000003000000`` olarak "
"serileştirilir"

#: ../../implementation/serialization-standard.rst:379
msgid ""
"A ``Result`` serializes as a single byte tag followed by the serialization "
"of the contained value. The tag is equal to ``1`` for the success variant "
"and ``0`` for the error variant."
msgstr ""
"Bir ``Result``, tek bir baytlık etiket olarak serileştirilir ve ardından "
"içerilen değerin serileştirilmesi gelir. Etiket, başarılı değişken için "
"``1`` ve hata değişkeni için ``0`` değerine eşittir."

#: ../../implementation/serialization-standard.rst:381
msgid "E.g. ``Ok(314u64)`` serializes as ``0x013a01000000000000``"
msgstr ""
"Örneğin, ``Ok(314u64)``, ``0x013a01000000000000`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:382
msgid "E.g. ``Err(\"Uh oh\")`` serializes as ``0x00050000005568206f68``"
msgstr ""
"Örneğin, ``Err(\"Uh oh\")``, ```0x00050000005568206f68`` olarak "
"serileştirilir"

#: ../../implementation/serialization-standard.rst:384
msgid ""
"Tuples serialize as the concatenation of their serialized elements. Similar "
"to ``FixedList`` the number of elements is not included in the serialization"
" because it is statically known in the type."
msgstr ""
"Demetler, serileştirilmiş öğelerinin birleştirilmesi olarak serileştirilir. "
"``FixedList``e benzer şekilde, tipte statik olarak bilindiği için öğelerin "
"sayısı serileştirmeye dahil edilmez."

#: ../../implementation/serialization-standard.rst:388
msgid ""
"E.g. ``(1u32, \"Hello, World!\", true)`` serializes as "
"``0x010000000d00000048656c6c6f2c20576f726c642101``"
msgstr ""
"Örneğin, ``(1u32, \"Hello, World!\", true)``, "
"``0x010000000d00000048656c6c6f2c20576f726c642101`` olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:391
msgid ""
"A ``Map`` serializes as a list of key-value tuples. There must be a well-"
"defined ordering on the keys, and in the serialization, the pairs are listed"
" in ascending order. This is done to ensure determinism in the "
"serialization, as ``Map`` data structures can be unordered."
msgstr ""
"Bir ``Map``, anahtar/değer demetlerinin bir listesi olarak serileştirilir. "
"Anahtarlarda iyi tanımlanmış bir sıralama olmalı ve serileştirmede çiftler "
"artan sırada listelenir. Bu, ``Map`` veri yapıları sırasız olabileceğinden, "
"serileştirmede belirliliği sağlamak için yapılır."

#: ../../implementation/serialization-standard.rst:395
msgid ""
"``URef`` values serialize as the concatenation of its address (which is a "
"fixed-length list of ``u8``) and a single byte tag representing the access "
"rights. Access rights are converted as follows:"
msgstr ""
"``URef`` değerleri, adresinin (``u8`` sabit uzunluklu listesidir) ve erişim "
"haklarını temsil eden tek bir bayt etiketinin birleşimi olarak "
"serileştirilir. Erişim hakları aşağıdaki gibi dönüştürülür:"

#: ../../implementation/serialization-standard.rst:398
msgid "Access Rights"
msgstr "Erişim Hakları"

#: ../../implementation/serialization-standard.rst:398
msgid "Serialization"
msgstr "Serileştirme"

#: ../../implementation/serialization-standard.rst:400
msgid "``NONE``"
msgstr "``NONE``"

#: ../../implementation/serialization-standard.rst:400
#: ../../implementation/serialization-standard.rst:433
#: ../../implementation/serialization-standard.rst:623
msgid "0"
msgstr "0"

#: ../../implementation/serialization-standard.rst:402
msgid "``READ``"
msgstr "``READ``"

#: ../../implementation/serialization-standard.rst:402
#: ../../implementation/serialization-standard.rst:435
#: ../../implementation/serialization-standard.rst:625
msgid "1"
msgstr "1"

#: ../../implementation/serialization-standard.rst:404
msgid "``WRITE``"
msgstr "``WRITE``"

#: ../../implementation/serialization-standard.rst:404
#: ../../implementation/serialization-standard.rst:437
#: ../../implementation/serialization-standard.rst:627
msgid "2"
msgstr "2"

#: ../../implementation/serialization-standard.rst:406
msgid "``READ_WRITE``"
msgstr "``READ_WRITE``"

#: ../../implementation/serialization-standard.rst:406
#: ../../implementation/serialization-standard.rst:439
#: ../../implementation/serialization-standard.rst:629
msgid "3"
msgstr "3"

#: ../../implementation/serialization-standard.rst:408
msgid "``ADD``"
msgstr "``ADD``"

#: ../../implementation/serialization-standard.rst:408
#: ../../implementation/serialization-standard.rst:441
#: ../../implementation/serialization-standard.rst:631
msgid "4"
msgstr "4"

#: ../../implementation/serialization-standard.rst:410
msgid "``READ_ADD``"
msgstr "``READ_ADD``"

#: ../../implementation/serialization-standard.rst:410
#: ../../implementation/serialization-standard.rst:443
#: ../../implementation/serialization-standard.rst:633
msgid "5"
msgstr "5"

#: ../../implementation/serialization-standard.rst:412
msgid "``ADD_WRITE``"
msgstr "``ADD_WRITE``"

#: ../../implementation/serialization-standard.rst:412
#: ../../implementation/serialization-standard.rst:445
#: ../../implementation/serialization-standard.rst:635
msgid "6"
msgstr "6"

#: ../../implementation/serialization-standard.rst:414
msgid "``READ_ADD_WRITE``"
msgstr "``READ_ADD_WRITE``"

#: ../../implementation/serialization-standard.rst:414
#: ../../implementation/serialization-standard.rst:447
#: ../../implementation/serialization-standard.rst:637
msgid "7"
msgstr "7"

#: ../../implementation/serialization-standard.rst:417
msgid ""
"``PublicKey`` serializes as a single byte tag representing the algorithm "
"followed by 32 bytes of the ``PublicKey`` itself:"
msgstr ""
"``PublicKey``, algoritmayı ve ardından ``PublicKey``'in 32 baytını temsil "
"eden tek bir bayt etiketi olarak serileştirilir:"

#: ../../implementation/serialization-standard.rst:419
msgid ""
"If the ``PublicKey`` is an ``Ed25519`` key, the single tag byte is ``1`` "
"followed by the individual bytes of the serialized key."
msgstr ""
"``PublicKey`` bir ``Ed25519`` anahtarıysa, tek etiket baytı ``1`` ve "
"ardından serileştirilmiş anahtarın tekil baytlarI gelir."

#: ../../implementation/serialization-standard.rst:420
msgid ""
"If the ``PublicKey`` is a ``Secp256k1`` key, the single tag byte is a ``2`` "
"followed by the individual bytes of the serialized key."
msgstr ""
"``PublicKey`` bir ``Secp256k1`` anahtarıysa, tek etiket baytı bir ``2`` ve "
"ardından serileştirilmiş anahtarın tekil baytlarıdır."

#: ../../implementation/serialization-standard.rst:423
msgid ""
"``Key`` values serialize as a single byte tag representing the variant, "
"followed by the serialization of the data that variant contains. For most "
"variants, this is simply a fixed-length 32-byte array. The exception is "
"``Key::URef``, which contains a ``URef``; so its data serializes per the "
"description above. The tags are as follows: ``Key::Account`` serializes as "
"``0``, ``Key::Hash`` as ``1``, ``Key::URef`` as ``2``."
msgstr ""
"``Key`` değerleri, varyantı temsil eden tek bir bayt etiketi olarak "
"serileştirilir, ardından varyantın içerdiği verilerin serileştirilmesi "
"gelir. Çoğu varyant için bu, yalnızca sabit uzunluklu 32 baytlık bir "
"dizidir. Bunun istisnası, bir ``URef`` içeren ``Key::URef``'tir; bu nedenle "
"verileri yukarıdaki açıklamaya göre serileştirilir. Etiketler şu şekildedir:"
" ``Key::Account``, ``0`` olarak; ``Key::Hash``, ``1`` olarak; ``Key::URef``,"
" ``2` olarak serileştirilir."

#: ../../implementation/serialization-standard.rst:428
msgid ""
"``CLType`` itself also has rules for serialization. A ``CLType`` serializes "
"as a single-byte tag, followed by the concatenation of serialized inner "
"types, if any (e.g., lists and tuples have inner types). ``FixedList`` is a "
"minor exception because it also includes the length in the type. However, "
"the length is included in the serialization (as a 32-bit integer, per the "
"serialization rules above), following the serialization of the inner type. "
"The tags are as follows:"
msgstr ""
"``CLType`` kendisi de serileştirme için kurallara sahiptir. Bir ``CLType``, "
"tek baytlık bir etiket olarak serileştirilir, ardından varsa serileştirilmiş"
" iç türlerin birleştirilmesi izler (örneğin, listeler ve demetlerin iç "
"türleri vardır). ``FixedList``, türde uzunluğu da içerdiğinden küçük bir "
"istisnadır. Ancak uzunluk, iç türün serileştirilmesini takiben "
"serileştirmeye dahil edilir (yukarıdaki serileştirme kurallarına göre 32 bit"
" tam sayı olarak). Etiketler aşağıdaki gibidir:"

#: ../../implementation/serialization-standard.rst:431
msgid "``CLType``"
msgstr "``CLType``"

#: ../../implementation/serialization-standard.rst:431
#: ../../implementation/serialization-standard.rst:621
msgid "Serialization Tag"
msgstr "Serileştirme Etiketi"

#: ../../implementation/serialization-standard.rst:433
msgid "``Bool``"
msgstr "``Bool``"

#: ../../implementation/serialization-standard.rst:435
msgid "``I32``"
msgstr "``I32``"

#: ../../implementation/serialization-standard.rst:437
msgid "``I64``"
msgstr "``I64``"

#: ../../implementation/serialization-standard.rst:439
msgid "``U8``"
msgstr "``U8``"

#: ../../implementation/serialization-standard.rst:441
msgid "``U32``"
msgstr "``U32``"

#: ../../implementation/serialization-standard.rst:443
msgid "``U64``"
msgstr "``U64``"

#: ../../implementation/serialization-standard.rst:445
msgid "``U128``"
msgstr "``U128``"

#: ../../implementation/serialization-standard.rst:447
msgid "``U256``"
msgstr "``U256``"

#: ../../implementation/serialization-standard.rst:449
msgid "``U512``"
msgstr "``U512``"

#: ../../implementation/serialization-standard.rst:449
#: ../../implementation/serialization-standard.rst:639
msgid "8"
msgstr "8"

#: ../../implementation/serialization-standard.rst:451
msgid "``Unit``"
msgstr "``Unit``"

#: ../../implementation/serialization-standard.rst:451
msgid "9"
msgstr "9"

#: ../../implementation/serialization-standard.rst:453
msgid "``String``"
msgstr "``String``"

#: ../../implementation/serialization-standard.rst:453
msgid "10"
msgstr "10"

#: ../../implementation/serialization-standard.rst:455
#: ../../implementation/serialization-standard.rst:627
msgid "``URef``"
msgstr "``URef``"

#: ../../implementation/serialization-standard.rst:455
msgid "11"
msgstr "11"

#: ../../implementation/serialization-standard.rst:457
#: ../../implementation/serialization-standard.rst:621
msgid "``Key``"
msgstr "``Key``"

#: ../../implementation/serialization-standard.rst:457
msgid "12"
msgstr "12"

#: ../../implementation/serialization-standard.rst:459
msgid "``Option``"
msgstr "``Option``"

#: ../../implementation/serialization-standard.rst:459
msgid "13"
msgstr "13"

#: ../../implementation/serialization-standard.rst:461
msgid "``List``"
msgstr "``List``"

#: ../../implementation/serialization-standard.rst:461
msgid "14"
msgstr "14"

#: ../../implementation/serialization-standard.rst:463
msgid "``FixedList``"
msgstr "``FixedList``"

#: ../../implementation/serialization-standard.rst:463
msgid "15"
msgstr "15"

#: ../../implementation/serialization-standard.rst:465
msgid "``Result``"
msgstr "``Result``"

#: ../../implementation/serialization-standard.rst:465
msgid "16"
msgstr "16"

#: ../../implementation/serialization-standard.rst:467
msgid "``Map``"
msgstr "``Map``"

#: ../../implementation/serialization-standard.rst:467
msgid "17"
msgstr "17"

#: ../../implementation/serialization-standard.rst:469
msgid "``Tuple1``"
msgstr "``Tuple1``"

#: ../../implementation/serialization-standard.rst:469
msgid "18"
msgstr "18"

#: ../../implementation/serialization-standard.rst:471
msgid "``Tuple2``"
msgstr "``Tuple2``"

#: ../../implementation/serialization-standard.rst:471
msgid "19"
msgstr "19"

#: ../../implementation/serialization-standard.rst:473
msgid "``Tuple3``"
msgstr "``Tuple3``"

#: ../../implementation/serialization-standard.rst:473
msgid "20"
msgstr "20"

#: ../../implementation/serialization-standard.rst:475
msgid "``Any``"
msgstr "``Any``"

#: ../../implementation/serialization-standard.rst:475
msgid "21"
msgstr "21"

#: ../../implementation/serialization-standard.rst:478
msgid ""
"A complete ``CLValue``, including both the data and the type, can also be "
"serialized (to store it in the global state). This is done by concatenating:"
" the serialization of the length (as a 32-bit integer) of the serialized "
"data (in bytes), the serialized data itself, and the serialization of the "
"type."
msgstr ""
"Hem verileri hem de türü içeren eksiksiz bir ``CLValue`` da "
"serileştirilebilir (küresel durumda depolamak için). Bu, şunları "
"birleştirerek yapılır: serileştirilmiş verilerin (bayt cinsinden) "
"uzunluğunun (32 bit tam sayı olarak) serileştirilmişi, serileştirilmiş "
"verilerin kendisinin ve türün serileştirilmesi."

#: ../../implementation/serialization-standard.rst:484
msgid "Contracts"
msgstr "Kontratlar"

#: ../../implementation/serialization-standard.rst:486
msgid ""
"Contracts are a special value type because they contain the on-chain logic "
"of the applications running on the Casper network. A *contract* contains the"
" following data:"
msgstr ""
"Kontratlar, Casper ağında çalışan uygulamaların zincir üzerindeki mantığını "
"içerdikleri için özel bir değer türüdür. Bir *kontrat* aşağıdaki verileri "
"içerir:"

#: ../../implementation/serialization-standard.rst:488
msgid "a `wasm module <https://webassembly.org/docs/modules/>`__"
msgstr "bir `wasm modülü <https://webassembly.org/docs/modules/>`__"

#: ../../implementation/serialization-standard.rst:489
msgid "a collection of named keys"
msgstr "adlandırılmış anahtarların bir toplamı"

#: ../../implementation/serialization-standard.rst:490
msgid "a protocol version"
msgstr "protokol sürümü"

#: ../../implementation/serialization-standard.rst:492
msgid ""
"The wasm module must contain a function named ``call``, which takes no "
"arguments and returns no values. This is the main entry point into the "
"contract. Moreover, the module may import any of the functions supported by "
"the Casper runtime; a list of all supported functions can be found in "
":ref:`Appendix A <appendix-a>`."
msgstr ""
"wasm modülü, hiçbir argüman almayan ve hiçbir değer döndürmeyen ``call`` "
"adlı bir işlev içermelidir. Bu, kontrata ana giriş noktasıdır. Ayrıca modül,"
" Casper çalışma zamanı tarafından desteklenen işlevlerden herhangi birini "
"içe aktarabilir; desteklenen tüm işlevlerin bir listesi :ref:`Ek A "
"<appendix-a>`da bulunabilir."

#: ../../implementation/serialization-standard.rst:494
msgid ""
"Note: though the ``call`` function signature has no arguments and no return "
"value, within the ``call`` function body, the ``get_named_arg`` runtime "
"function can be used to accept arguments (by ordinal), and the ``ret`` "
"runtime function can be used to return a single ``CLValue`` to the caller."
msgstr ""
"Not: ``call`` fonksiyonu imzasının argümanları ve dönüş değeri olmamasına "
"rağmen, ``call`` fonksiyon gövdesi içinde ``get_named_arg`` çalışma zamanı "
"fonksiyonu, argümanları (sıraya göre) kabul etmek için kullanılabilir ve "
"``ret`` çalışma zamanı işlevi, çağırana tek bir ``CLValue`` döndürmek için "
"kullanılabilir."

#: ../../implementation/serialization-standard.rst:496
msgid ""
"The named keys are used to give human-readable names to keys in the global "
"state, which are essential to the contract. For example, the hash key of "
"another contract it frequently calls may be stored under a meaningful name. "
"It is also used to store the ``URef``\\ s, which are known to the contract "
"(see the section on Permissions for details)."
msgstr ""
"Adlandırılmış anahtarlar, kontrat için gerekli olan küresel durumdaki "
"anahtarlara okunabilir adlar vermek için kullanılır. Örneğin, sık çağırdığı "
"başka bir kontratın özet anahtarı, anlamlı bir ad altında saklanabilir. "
"Ayrıca kontratta bilinen ``URef``\\ leri saklamak için de kullanılır "
"(ayrıntılar için İzinler bölümüne bakınız)."

#: ../../implementation/serialization-standard.rst:498
msgid ""
"Each contract specifies the Casper protocol version that was active when the"
" contract was written to the global state."
msgstr ""
"Her sözleşme, sözleşme küresel duruma yazıldığında etkin olan Casper "
"protokol sürümünü belirtir."

#: ../../implementation/serialization-standard.rst:503
msgid "Keys"
msgstr "Anahtarlar"

#: ../../implementation/serialization-standard.rst:505
msgid ""
"In this chapter, we describe what constitutes a “key”, the permissions model"
" for the keys, and how they are serialized."
msgstr ""
"Bu bölümde, “key”ı neyin oluşturduğunu, anahtarlar için izin modelini ve "
"bunların nasıl seri hale getirildiğini açıklıyoruz."

#: ../../implementation/serialization-standard.rst:507
msgid ""
"A *key* in the :ref:`Global State<global-state-intro>` is one of the "
"following data types:"
msgstr ""
":ref:`Global State<global-state-intro>` içindeki bir *anahtar*, aşağıdaki "
"veri türlerinden biridir:"

#: ../../implementation/serialization-standard.rst:509
msgid "32-byte account identifier (called an “account identity key”)"
msgstr ""
"32 baytlık hesap tanımlayıcısı (\"hesap kimliği anahtarı\" olarak "
"adlandırılır)"

#: ../../implementation/serialization-standard.rst:510
msgid "32-byte immutable contract identifier (called a “hash key”)"
msgstr ""
"32 baytlık değişmez sözleşme tanımlayıcısı (\"özet anahtarı\" olarak "
"adlandırılır)"

#: ../../implementation/serialization-standard.rst:511
msgid "32-byte reference identifier (called an “unforgeable reference”)"
msgstr ""
"32 baytlık referans tanımlayıcısı (\"yenilmez referans\" olarak "
"adlandırılır)"

#: ../../implementation/serialization-standard.rst:512
msgid "32-byte transfer identifier"
msgstr "32 baytlık transfer tanımlayıcısı"

#: ../../implementation/serialization-standard.rst:513
msgid "32-byte deploy information identifier"
msgstr "32 baytlık dağıtım bilgisi tanımlayıcısı"

#: ../../implementation/serialization-standard.rst:514
msgid "32-byte purse balance identifier"
msgstr "32 baytlık çanta bakiyesi tanımlayıcısı"

#: ../../implementation/serialization-standard.rst:515
msgid "32-byte Auction bid identifier"
msgstr "32 bayt Açık Arttırma teklif tanımlayıcısı"

#: ../../implementation/serialization-standard.rst:516
msgid "32-byte Auction withdrawal identifier"
msgstr "32 bayt Açık Arttırma geri çekme tanımlayıcısı"

#: ../../implementation/serialization-standard.rst:518
msgid ""
"The one exception to note here is the identifier for ``EraInfo``, which "
"actually serializes as a ``u64`` value with an additional byte for the tag."
msgstr ""
"Burada dikkate alınması gereken bir istisna, aslında etiket için ek bir bayt"
" ile ``u64`` değeri olarak seri hale getirilen ``EraInfo`` tanımlayıcısıdır."

#: ../../implementation/serialization-standard.rst:524
msgid "Account identity key"
msgstr "Hesap kimliği anahtarı"

#: ../../implementation/serialization-standard.rst:526
msgid ""
"This key type is used specifically for accounts in the global state. All "
"accounts in the system must be stored under an account identity key, and no "
"other types. The 32-byte identifier which represents this key is derived "
"from the ``blake2b256`` hash of the public key used to create the associated"
" account (see :ref:`Accounts <accounts-associated-keys-weights>` for more "
"information)."
msgstr ""
"Bu anahtar türü, özellikle küresel durumdaki hesaplar için kullanılır. "
"Sistemdeki tüm hesaplar bir hesap kimlik anahtarı altında saklanmalı ve "
"başka hiçbir türde saklanmamalıdır. Bu anahtarı temsil eden 32 baytlık "
"tanımlayıcı, ilişkili hesabı oluşturmak için kullanılan genel anahtarın "
"``blake2b256`` özet değerinden türetilmiştir (daha fazla bilgi için bkz. "
":ref:`Accounts <accounts-associated-keys-weights>`)."

#: ../../implementation/serialization-standard.rst:535
msgid "Hash key"
msgstr "Özet (hash) anahtarı"

#: ../../implementation/serialization-standard.rst:537
msgid ""
"This key type is used for storing contracts immutably. Once a contract is "
"written under a hash key, that contract can never change. The 32-byte "
"identifier representing this key is derived from the ``blake2b256`` hash of "
"the deploy hash (see :ref:`block-structure-head` for more information) "
"concatenated with a 4-byte sequential ID. The ID begins at zero for each "
"deploy and increments by one each time a contract is stored. The purpose of "
"this ID is to allow each contract stored in the same deploy to have a unique"
" key."
msgstr ""
"Bu anahtar türü, kontratları değişmez bir şekilde saklamak için kullanılır. "
"Bir özet anahtarının altına bir kontrat yazıldığında, o kontrat asla "
"değişmez. Bu anahtarı temsil eden 32 baytlık tanımlayıcı, 4 baytlık sıralı "
"bir kimlikle birleştirilmiş dağıtım özetinin ``blake2b256`` özetinden "
"türemiştir (daha fazla bilgi için bkz :ref:`block-structure-head` ). Kimlik,"
" her dağıtım için sıfırdan başlar ve kontrat her depolandığında bir artar. "
"Bu kimliğin amacı, aynı dağıtımda depolanan her kontratın benzersiz bir "
"anahtara sahip olmasına izin vermektir."

#: ../../implementation/serialization-standard.rst:548
msgid "Unforgeable Reference (``URef``)"
msgstr "Taklit Edilemez Referans (``URef``)"

#: ../../implementation/serialization-standard.rst:550
msgid ""
"``URef`` broadly speaking can be used to store values and manage permissions"
" to interact with the value stored under the ``URef``. ``URef`` is a tuple "
"which contains the address under which the values are stored and the Access "
"rights to the ``URef``. Refer to the :ref:`Unforgeable Reference<uref-head>`"
" section for details on how ``URefs`` are managed."
msgstr ""
"Genel olarak ``URef``, değerleri depolamak ve ``URef`` altında depolanan "
"değerle etkileşime girmek için izinleri yönetmek için kullanılabilir. "
"\"URef\", değerlerin saklandığı adresi ve ``URef``e erişim haklarını içeren "
"bir tanımlama demetidir. ``URef``lerin nasıl yönetildiğine ilişkin "
"ayrıntılar için :ref:`Unforgeable Reference<uref-head>` bölümüne bakın."

#: ../../implementation/serialization-standard.rst:557
msgid "Transfer Key"
msgstr "Transfer Anahtarı"

#: ../../implementation/serialization-standard.rst:559
msgid ""
"This key type is used specifically for transfers in the global state. All "
"transfers in the system must be stored under a transfer key and no other "
"type. The 32-byte identifier which represents this key is derived from the "
"``blake2b256`` hash of the transfer address associated with the given "
"transfer"
msgstr ""
"Bu anahtar türü, özellikle küresel durumdaki aktarımlar için kullanılır. "
"Sistemdeki tüm transferler bir transfer anahtarı altında saklanmalı ve başka"
" bir türde saklanmamalıdır. Bu anahtarı temsil eden 32 baytlık tanımlayıcı, "
"verilen aktarımla ilişkili aktarım adresinin ``blake2b256`` özet değerinden "
"türetilir."

#: ../../implementation/serialization-standard.rst:567
msgid "DeployInfo Key"
msgstr "DeployInfo Anahtarı"

#: ../../implementation/serialization-standard.rst:569
msgid ""
"This key type is used specifically for storing information related to "
"deploys in the global state. Information for a given deploy is stored under "
"this key only. The 32-byte identifier which represents this key is derived "
"from the ``blake2b256`` hash of the deploy itself."
msgstr ""
"Bu anahtar türü, özellikle küresel durumdaki dağıtımlarla ilgili bilgileri "
"depolamak için kullanılır. Belirli bir dağıtım için bilgiler yalnızca bu "
"anahtar altında depolanır. Bu anahtarı temsil eden 32 baytlık tanımlayıcı, "
"dağıtımın kendisinin ``blake2b256`` özet değerinden türetilir."

#: ../../implementation/serialization-standard.rst:577
msgid "EraInfo Key"
msgstr "EraInfo Anahtarı"

#: ../../implementation/serialization-standard.rst:578
msgid ""
"This key type is used specifically for storing information related to the "
"``Auction`` metadata for a particular era. The underlying data type stored "
"under this is a vector of the allocation of seigniorage for that given era. "
"The identifier for this key is a new type that wraps around the primitive "
"``u64`` data type and co-relates to the era number when the auction "
"information was stored."
msgstr ""
"Bu anahtar türü, belirli bir döneme ilişkin ``Auction`` meta verileriyle "
"ilgili bilgileri depolamak için özel olarak kullanılır. Bunun altında "
"saklanan temel veri türü, o dönem için senyoraj tahsisinin bir vektörüdür. "
"Bu anahtarın tanımlayıcısı, ilkel ``u64`` veri türünü saran ve açık artırma "
"bilgilerinin depolandığı dönem numarasıyla ilişkili olan yeni bir türdür."

#: ../../implementation/serialization-standard.rst:586
msgid "Balance Key"
msgstr "Bakiye Anahtarı"

#: ../../implementation/serialization-standard.rst:587
msgid ""
"This key type is used to store information related to the balance of a given"
" purse. All purse balances are stored using this key. The 32-byte identifier"
" which represents this key is derived from the Address of the URef, which "
"relates to the purse."
msgstr ""
"Bu anahtar türü, belirli bir cüzdanın bakiyesiyle ilgili bilgileri depolamak"
" için kullanılır. Tüm cüzdan bakiyeleri bu anahtar kullanılarak saklanır. Bu"
" anahtarı temsil eden 32 baytlık tanımlayıcı, cüzdana ilişkin URef'in "
"Adresinden türetilir."

#: ../../implementation/serialization-standard.rst:593
msgid "Bid Key"
msgstr "Teklif Anahtarı"

#: ../../implementation/serialization-standard.rst:595
msgid ""
"This key type is used specifically for storing information related to "
"auction bids in the global state. Information for the bids is stored under "
"this key only. The 32-byte identifier which represents this key is derived "
"from the ``blake2b256`` hash of the public key used to create the associated"
" account (see :ref:`Accounts <accounts-associated-keys-weights>` for more "
"information)."
msgstr ""
"Bu anahtar türü, küresel durumda açık arttırma teklifleriyle ilgili "
"bilgileri depolamak için özel olarak kullanılır. Tekliflere ilişkin bilgiler"
" yalnızca bu anahtar altında saklanır. Bu anahtarı temsil eden 32 baytlık "
"tanımlayıcı, ilişkili hesabı oluşturmak için kullanılan genel anahtarın "
"``blake2b256`` özet değerinden türetilmiştir (daha fazla bilgi için bkz.  "
":ref:`Accounts <accounts-associated-keys-weights>`)."

#: ../../implementation/serialization-standard.rst:603
msgid "Withdraw Key"
msgstr "Para Çekme Anahtarı"

#: ../../implementation/serialization-standard.rst:605
msgid ""
"This key type is used specifically for storing information related to "
"auction withdraws in the global state. Information for the withdrawals is "
"stored under this key only. The 32-byte identifier which represents this key"
" is derived from the ``blake2b256`` hash of the public key used to create "
"the associated account (see :ref:`Accounts <accounts-associated-keys-"
"weights>` for more information)."
msgstr ""
"Bu anahtar türü, özellikle küresel durumda açık arttırma para çekimleri "
"ilgili bilgileri depolamak için kullanılır. Para çekme bilgileri sadece bu "
"anahtar altında saklanır. Bu anahtarı temsil eden 32 baytlık tanımlayıcı, "
"ilişkili hesabı oluşturmak için kullanılan genel anahtarın ``blake2b256`` "
"özet değerinden türetilmiştir (daha fazla bilgi için bkz. :ref:`Accounts "
"<accounts-associated-keys-weights>`)."

#: ../../implementation/serialization-standard.rst:614
msgid "Serialization for ``Key``"
msgstr "``Key`` için serileştirme"

#: ../../implementation/serialization-standard.rst:616
msgid ""
"Given the different variants for the over-arching ``Key`` data-type, each of"
" the different variants is serialized differently. This section of this "
"chapter details how the individual variants are serialized. The leading byte"
" of the serialized buffer acts as a tag indicating the serialized variant."
msgstr ""
"Kapsamlı ``Key`` veri türü için farklı varyantlar göz önüne alındığında, "
"farklı varyantların her biri farklı şekilde serileştirilir. Bu kısmın bu "
"bölümü, bireysel varyantların nasıl serileştirildiğini ayrıntılarıyla "
"anlatır. Serileştirilmiş arabelleğin baştaki baytı, serileştirilmiş varyantı"
" gösteren bir etiket görevi görür."

#: ../../implementation/serialization-standard.rst:623
msgid "``Account``"
msgstr "``Account``"

#: ../../implementation/serialization-standard.rst:625
msgid "``Hash``"
msgstr "``Hash``"

#: ../../implementation/serialization-standard.rst:629
msgid "``Transfer``"
msgstr "``Transfer``"

#: ../../implementation/serialization-standard.rst:631
msgid "``DeployInfo``"
msgstr "``DeployInfo``"

#: ../../implementation/serialization-standard.rst:633
msgid "``EraInfo``"
msgstr "``EraInfo``"

#: ../../implementation/serialization-standard.rst:635
msgid "``Balance``"
msgstr "``Balance``"

#: ../../implementation/serialization-standard.rst:637
msgid "``Bid``"
msgstr "``Bid``"

#: ../../implementation/serialization-standard.rst:639
msgid "``Withdraw``"
msgstr "``Withdraw``"

#: ../../implementation/serialization-standard.rst:643
msgid ""
"``Account`` serializes as a 32 byte long buffer containing the byte "
"representation of the underlying ``AccountHash``"
msgstr ""
"``Account``, temel alınan ``AccountHash`` öğesinin bayt temsilini içeren 32 "
"bayt uzunluğunda bir arabellek olarak serileştirilir"

#: ../../implementation/serialization-standard.rst:644
msgid ""
"``Hash`` serializes as a 32 byte long buffer containing the byte "
"representation of the underlying ``Hash`` itself."
msgstr ""
"``Hash``, temel ``Hash``in kendisinin bayt temsilini içeren 32 bayt "
"uzunluğunda bir arabellek olarak serilştirilir."

#: ../../implementation/serialization-standard.rst:645
msgid ""
"``URef`` is a tuple that contains the address of the URef and the access "
"rights to that ``URef``. The serialized representation of the ``URef`` is 33"
" bytes long. The first 32 bytes are the byte representation of the ``URef`` "
"address, and the last byte contains the bits corresponding to the access "
"rights of the ``URef``. Refer to the :ref:`CLValue<serialization-standard-"
"values>` section of this chapter for details on how ``AccessRights`` are "
"serialized."
msgstr ""
"``URef``, URef adresini ve bu ``URef`` 'e erişim haklarını içeren bir "
"tanımlama grubudur. ``URef`` in serileştirilmiş gösterimi 33 bayt "
"uzunluğundadır. İlk 32 bayt, \"URef\" adresinin bayt temsilidir ve son bayt,"
" \"URef\"in erişim haklarına karşılık gelen bitleri içerir. ``AccessRights``"
" ın nasıl serileştirildiğine ilişkin ayrıntılar için bu kısmın :ref:`CLValue"
"<serialization-standard-values>` bölümüne bakın."

#: ../../implementation/serialization-standard.rst:646
msgid ""
"``Transfer`` serializes as a 32 byte long buffer containing the byte "
"representation of the hash of the transfer."
msgstr ""
"``Transfer``, aktarımın özet değerinin bayt temsilini içeren 32 bayt "
"uzunluğunda bir arabellek olarak serileştirilir."

#: ../../implementation/serialization-standard.rst:647
msgid ""
"``DeployInfo`` serializes as 32 byte long buffer containing the byte "
"representation of the Deploy hash. See the Deploy section above for how "
"Deploy hashes are serialized."
msgstr ""
"``DeployInfo``, Deploy karmasının bayt temsilini içeren 32 bayt uzunluğunda "
"bir arabellek olarak serileştirilir. Dağıtım özetlerinin nasıl "
"serileştirildiğini öğrenmek için yukarıdaki Dağıtma bölümüne bakın."

#: ../../implementation/serialization-standard.rst:648
msgid ""
"``EraInfo`` serializes a ``u64`` primitive type containing the little-endian"
" byte representation of ``u64``."
msgstr ""
"``EraInfo``, ``u64`` ün küçük son haneli bayt temsilini içeren ``u64`` ilkel"
" türünü serileştirir."

#: ../../implementation/serialization-standard.rst:649
msgid ""
"``Balance`` serializes as 32 byte long buffer containing the byte "
"representation of the URef address."
msgstr ""
"``Balance``, URef adresinin bayt temsilini içeren 32 bayt uzunluğunda bir "
"arabellek olarak serileştirilir."

#: ../../implementation/serialization-standard.rst:650
msgid ""
"``Bid`` and ``Withdraw`` both contain the ``AccountHash`` as their "
"identifier; therefore, they serialize in the same manner as the ``Account`` "
"variant."
msgstr ""
"``Bid`` ve ``Withdraw``, tanımlayıcı olarak ``AccountHash`` i içerir; bu "
"nedenle, ``Account`` değişkeniyle aynı şekilde serileştirilirler."

#: ../../implementation/serialization-standard.rst:656
msgid "Permissions"
msgstr "İzinler"

#: ../../implementation/serialization-standard.rst:658
msgid ""
"There are three types of actions that can be done on a value: read, write, "
"add. The reason for *add* to be called out separately from *write* is to "
"allow for commutativity checking. The available actions depend on the key "
"type and the context. Some key types only allow controlled access by smart "
"contracts via the contract API, and other key types refer to values produced"
" and used by the system itself and are not accessible to smart contracts at "
"all but can be read via off-chain queries. This is summarized in the table "
"below:"
msgstr ""
"Bir değer üzerinde yapılabilecek üç tür eylem vardır: okuma, yazma, ekleme. "
"*ekle*'nin *yaz*'tan ayrı olarak çağrılmasının nedeni, değişme denetimine "
"izin vermektir. Kullanılabilir eylemler, anahtar türüne ve bağlama bağlıdır."
" Bazı anahtar türleri, yalnızca sözleşme API'si aracılığıyla akıllı "
"kontratlara kontrollü erişime izin verir ve diğer anahtar türleri, sistemin "
"kendisi tarafından üretilen ve kullanılan değerlere atıfta bulunur ve akıllı"
" kontratlara hiçbir şekilde erişilemez, ancak zincir dışı sorgular "
"aracılığıyla okunabilir. Bu, aşağıdaki tabloda özetlenmiştir:"

#: ../../implementation/serialization-standard.rst:665
msgid "Key Type"
msgstr "Anahtar Türü"

#: ../../implementation/serialization-standard.rst:665
msgid "Available Actions"
msgstr "Mevcut İşlemler"

#: ../../implementation/serialization-standard.rst:667
msgid "Account"
msgstr "Account"

#: ../../implementation/serialization-standard.rst:667
msgid "Read + Add (via API)"
msgstr "Oku + Ekle (API ile)"

#: ../../implementation/serialization-standard.rst:669
msgid "Hash"
msgstr "Hash"

#: ../../implementation/serialization-standard.rst:669
msgid "Read"
msgstr "Oku"

#: ../../implementation/serialization-standard.rst:671
msgid "URef"
msgstr "URef"

#: ../../implementation/serialization-standard.rst:671
msgid "Read + Write and/or Add"
msgstr "Oku + Yaz ve/veya Ekle"

#: ../../implementation/serialization-standard.rst:673
msgid "Transfer"
msgstr "Transfer"

#: ../../implementation/serialization-standard.rst:673
#: ../../implementation/serialization-standard.rst:675
#: ../../implementation/serialization-standard.rst:677
#: ../../implementation/serialization-standard.rst:681
#: ../../implementation/serialization-standard.rst:683
msgid "System"
msgstr "System"

#: ../../implementation/serialization-standard.rst:677
msgid "EraInfo"
msgstr "EraInfo"

#: ../../implementation/serialization-standard.rst:679
msgid "Balance"
msgstr "Balance"

#: ../../implementation/serialization-standard.rst:679
msgid "Read (via API)"
msgstr "Oku (API yolu ile)"

#: ../../implementation/serialization-standard.rst:681
msgid "Bid"
msgstr "Bid"

#: ../../implementation/serialization-standard.rst:683
msgid "Withdraw"
msgstr "Withdraw"

#: ../../implementation/serialization-standard.rst:687
msgid ""
"Refer to :ref:`URef permissions<uref-permissions>` on how permissions are "
"handled in the case of ``URef``\\ s."
msgstr ""
"``URef``\\ durumunda izinlerin nasıl idare edildiğine ilişkin :ref:`URef "
"permissions<uref-permissions>` 'a bakınız."
