# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# 
# Translators:
# ilker <bilkerarslan40@gmail.com>, 2021
# Muhammet Kara <muhammet.kara@metu.edu.tr>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: 2021-06-26 21:48+0000\n"
"Last-Translator: Muhammet Kara <muhammet.kara@metu.edu.tr>, 2021\n"
"Language-Team: Turkish (https://www.transifex.com/caspernetwork/teams/122124/tr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: tr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../implementation/global-state.rst:4
msgid "Global State"
msgstr "Küresel Durum"

#: ../../implementation/global-state.rst:9
msgid "Introduction"
msgstr "Giriş"

#: ../../implementation/global-state.rst:11
msgid ""
"The “global state” is the storage layer for the blockchain. All accounts, "
"contracts, and any associated data they have are stored in the global state."
" Our global state has the semantics of a key-value store (with additional "
"permissions logic since not all users can access all values in the same "
"way). Refer to :ref:`Keys and Permissions <serialization-standard-state-"
"keys>` for further information on keys. Each block causes changes to this "
"global state because of the execution of the deploys it contains. For "
"validators to efficiently judge the correctness of these changes, "
"information about the new state needs to be communicated succinctly. "
"Moreover, we need to communicate pieces of the global state to users while "
"allowing them to verify the correctness of the parts they receive. For these"
" reasons, the key-value store is implemented as a :ref:`Merkle trie <global-"
"state-trie>`."
msgstr ""
"“Küresel durum”, blok zincirin depolama katmanıdır. Tüm hesaplar, "
"sözleşmeler ve sahip oldukları ilişkili veriler küresel durumda saklanır. "
"Küresel durumumuz, bir anahtar/değer deposu semantiğine sahiptir (tüm "
"kullanıcılar tüm değerlere aynı şekilde erişemeyeceğinden ek izinler "
"mantığıyla). Anahtarlar hakkında daha fazla bilgi için :ref:`Keys and "
"Permissions <serialization-standard-state-keys>` bölümüne bakınız. Her blok,"
" içerdiği dağıtımların yürütülmesi nedeniyle bu genel durumda değişikliklere"
" neden olur. Doğrulayıcıların bu değişikliklerin doğruluğunu verimli bir "
"şekilde yargılayabilmeleri için yeni durum hakkındaki bilgilerin kısa ve öz "
"bir şekilde iletilmesi gerekir. Ayrıca, küresel durumun parçalarını "
"kullanıcılara ileterek, aldıkları parçaların doğruluğunu doğrulamalarına "
"izin vermemiz gerekiyor. Bu nedenlerle, anahtar/değer deposu bir "
":ref:`Merkle trie <global-state-trie>` olarak uygulanır."

#: ../../implementation/global-state.rst:26
msgid "Merkle trie structure"
msgstr "Merkle ağacı yapısı"

#: ../../implementation/global-state.rst:28
msgid ""
"At a high level, a Merkle trie is a key-value store data structure that can "
"be shared piece-wise in a verifiable way (via a construction called a Merkle"
" proof). Each node is labeled by the hash of its data. Leaf nodes are "
"labeled with the hash of their data. Non-leaf nodes are labeled with the "
"hash of the labels of their child nodes."
msgstr ""
"Yüksek düzeyde, bir Merkle ağacı, doğrulanabilir bir şekilde parça parça "
"paylaşılabilen bir anahtar-değer deposu veri yapısıdır (Merkle kanıtı adı "
"verilen bir yapı aracılığıyla). Her düğüm, verilerinin özet değeriyle "
"etiketlenir. Yaprak düğümleri, verilerinin özeti ile etiketlenir. Yaprak "
"olmayan düğümler, alt düğümlerinin etiketlerinin özeti ile etiketlenir."

#: ../../implementation/global-state.rst:31
msgid ""
"Our implementation of the trie has radix of 256, meaning each branch node "
"can have up to 256 children. A path through the tree can be an array of "
"bytes, and serialization directly links a key with a path through the tree "
"as its associated value."
msgstr ""
"Ağaç uygulamamızın kökü bulunmakta, yani düğümünün 256'ya kadar alt ögesi "
"olabilir. Ağacın içinden geçen bir yol, bir bayt dizisi olabilir ve "
"serileştirme, bir anahtarı, ilişkili değeri olarak ağaçtan geçen bir yola "
"doğrudan bağlar."

#: ../../implementation/global-state.rst:33
msgid "Formally, a trie node is one of the following:"
msgstr "Resmi olarak, bir ağaç düğümü aşağıdakilerden biridir:"

#: ../../implementation/global-state.rst:35
msgid "a leaf, which includes a key and a value"
msgstr "bir anahtar ve bir değer içeren bir yaprak"

#: ../../implementation/global-state.rst:36
msgid ""
"a branch, which has up to 256 ``blake2b256`` hashes, pointing to up to 256 "
"other nodes in the trie (recall each node is labeled by its hash)"
msgstr ""
"256'ya kadar ``blake2b256`` özet değerine sahip olan ve ağaç içindeki 256 "
"diğer düğüme işaret eden bir dal (her düğümün özet değeriyle etiketlendiğini"
" hatırlayın)"

#: ../../implementation/global-state.rst:38
msgid ""
"an extension node, which includes a byte array (called the affix) and a "
"``blake2b256`` hash pointing to another node in the trie"
msgstr ""
"bir bayt dizisi (ek olarak adlandırılır) ve denemedeki başka bir düğüme "
"işaret eden bir ``blake2b256`` özet içeren bir uzantı düğümü"

#: ../../implementation/global-state.rst:41
msgid ""
"The purpose of the extension node is to allow path compression. Consider an "
"example where all keys use the same first four bytes for values in the trie."
" In this case, it would be inefficient to traverse through four branch nodes"
" where there is only one choice; instead, the root node of the trie could be"
" an extension node with affix equal to those first four bytes and pointer to"
" the first non-trivial branch node."
msgstr ""
"Uzantı düğümünün amacı, yol sıkıştırmasına izin vermektir. Tüm anahtarların "
"ağaçtaki değerler için aynı ilk dört baytı kullandığı bir örnek düşünün. Bu "
"durumda, yalnızca bir seçeneğin olduğu dört dal düğümü arasında geçiş yapmak"
" verimsiz olacaktır; bunun yerine, ağacın kök düğümü, ilk dört bayta eşit "
"eki olan ve önemsiz olmayan ilk dal düğümüne işaret eden bir uzantı düğümü "
"olabilir."

#: ../../implementation/global-state.rst:46
msgid "The rust implementation of our trie can be found on GitHub:"
msgstr "Ağacımızın Rust uygulaması GitHub'da bulunabilir:"

#: ../../implementation/global-state.rst:48
msgid ""
"`definition of the trie data structure <https://github.com/CasperLabs"
"/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie/mod.rs#L320>`_"
msgstr ""
"`ağaç veri yapısı tanımı <https://github.com/CasperLabs/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie/mod.rs#L320>`_"

#: ../../implementation/global-state.rst:49
msgid ""
"`reading from the trie <https://github.com/CasperLabs/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L37>`_"
msgstr ""
"`ağaçtan veri okumak <https://github.com/CasperLabs/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L37>`_"

#: ../../implementation/global-state.rst:50
msgid ""
"`writing to the trie <https://github.com/CasperLabs/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L638>`_"
msgstr ""
"`ağaca veri yazmak <https://github.com/CasperLabs/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L638>`_"

#: ../../implementation/global-state.rst:52
msgid ""
"Note: Conceptually, each block has its trie because the state changes based "
"on the deploys it contains. For this reason, our implementation has a notion"
" of a ``TrieStore``, which allows us to look up the root node for each trie."
msgstr ""
"Not: Kavramsal olarak, her bloğun bir ağacı vardır, çünkü durum içerdiği "
"dağıtımlara göre değişir. Bu nedenle, uygulamamız, her deneme için kök "
"düğümü aramamıza izin veren bir \"TrieStore\" kavramına sahiptir."
