# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# 
# Translators:
# muss abahmane <elmabahma@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: 2021-06-26 21:45+0000\n"
"Last-Translator: muss abahmane <elmabahma@gmail.com>, 2021\n"
"Language-Team: French (https://www.transifex.com/caspernetwork/teams/122124/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../dapp-dev-guide/calling-contracts.rst:2
msgid "Calling Contracts"
msgstr "Invocation des Contrats"

#: ../../dapp-dev-guide/calling-contracts.rst:4
msgid ""
"The most efficient way to use blockchain is to store (install) your contract"
" on the system and then call it. This section outlines the steps to do this."
msgstr ""
"La manière la plus efficace d'utiliser la blockchain est de stocker "
"(installer) votre contrat sur le système, puis de l'appeler. Cette section "
"présente les étapes à suivre pour y parvenir."

#: ../../dapp-dev-guide/calling-contracts.rst:7
msgid "Installing a Smart Contract"
msgstr "Installation d'un contrat intelligent"

#: ../../dapp-dev-guide/calling-contracts.rst:9
msgid ""
"First, set up the contract name so you can call it using the name in "
"subsequent deploys. The following code sample uses ``sample_contract`` as "
"the contract name."
msgstr ""
"Tout d'abord, configurez le nom du contrat afin de pouvoir l'appeler en "
"utilisant ce nom dans les déploiements ultérieurs. L'exemple de code suivant"
" utilise ``sample_contract`` comme nom de contrat."

#: ../../dapp-dev-guide/calling-contracts.rst:25
msgid ""
"Next, deploy the smart contract using the ``put-deploy`` command and send in"
" the compiled wasm as ``--session code``."
msgstr ""
"Ensuite, déployez le contrat intelligent en utilisant la commande ``put-"
"deploy`` et envoyez le wasm compilé comme ``--session code``."

#: ../../dapp-dev-guide/calling-contracts.rst:29
msgid "Querying Global State for the Address of a Contract"
msgstr "Interrogation du Global State pour l'adresse d'un contrat"

#: ../../dapp-dev-guide/calling-contracts.rst:31
msgid ""
"The ``query-state`` command is a generic query against `global state "
"<https://docs.casperlabs.io/en/latest/glossary/G.html#global-state>`_. "
"Earlier, we queried global state for the account's main purse. Here, we "
"query the state of a contract. We can do so by including the contract "
"address rather than the account public key in the ``query-state`` command."
msgstr ""
"La commande ``query-state`` est une requête générique sur le `global state "
"<https://docs.casperlabs.io/fr/latest/glossary/G.html#global-state>`_. "
"Auparavant, nous avons interrogé le global state du livret principal (main "
"purse). Là, nous interrogeons l'état d'un contrat. Nous pouvons le faire en "
"incluant l'adresse du contrat plutôt que la clé publique du compte dans la "
"commande ``query-state``."

#: ../../dapp-dev-guide/calling-contracts.rst:33
msgid ""
"Here we query to get the address of an ERC20 contract from Global State."
msgstr ""
"Ici nous faisons une requête pour obtenir l'adresse d'un contrat ERC20 "
"auprès du Global State."

#: ../../dapp-dev-guide/calling-contracts.rst:36
msgid "Step 1: Get the Latest Global State Hash"
msgstr "Étape 1 : Obtenir le dernier Hach du Global State"

#: ../../dapp-dev-guide/calling-contracts.rst:38
msgid ""
"We need to obtain the global state hash after our contract has been deployed"
" to the network."
msgstr ""
"Nous devons obtenir le hash du global state après que notre contrat ait été "
"déployé sur le réseau."

#: ../../dapp-dev-guide/calling-contracts.rst:45
msgid "Step 2: Query State"
msgstr "Étape 2 : Interroger l'État (State)"

#: ../../dapp-dev-guide/calling-contracts.rst:47
msgid ""
"Take the global state hash from Step 1 and include it here, along with the "
"account public key that created the contract."
msgstr ""
"Prenez le hach du globale state de l'étape 1 et incluez-le ici, avec la clé "
"publique du compte qui a créé le contrat."

#: ../../dapp-dev-guide/calling-contracts.rst:54
msgid "Example Result"
msgstr "Exemple de résultat"

#: ../../dapp-dev-guide/calling-contracts.rst:56
msgid ""
"If there is a contract stored in an account, it will appear under ``named-"
"keys``."
msgstr ""
"Si un contrat est stocké dans un compte, il apparaîtra dans la section "
"``named-keys``."

#: ../../dapp-dev-guide/calling-contracts.rst:87
msgid "Step 3: Query the contract State"
msgstr "Étape 3 : Interroger l'État du contrat"

#: ../../dapp-dev-guide/calling-contracts.rst:89
msgid ""
"Now that we have the hash of the contract, we can query the contract's "
"internal state. To do this, we pass in the contract's hash and the global "
"state hash.  If we look at the ERC20 contract, we see a token name specified"
" as ``_name``.  We can query for the value stored here."
msgstr ""
"Maintenant que nous avons le hash du contrat, nous pouvons interroger l'état"
" interne du contrat. Pour ce faire, nous fournissons le hash du contrat et "
"le hash du global state. Si nous regardons le contrat ERC20, nous voyons un "
"nom de jeton spécifié comme ``_name``. Nous pouvons demander la valeur "
"stockée ici."

#: ../../dapp-dev-guide/calling-contracts.rst:95
msgid "And we should see something like this:"
msgstr "Et on devrait voir quelque chose comme ceci :"

#: ../../dapp-dev-guide/calling-contracts.rst:109
msgid ""
"**Note**: This result is returned as bytes. These bytes need to be "
"deserialized into the correct CLType in a smart contract or a dApp. Refer to"
" `casper-types <https://docs.rs/casperlabs-"
"types/latest/casperlabs_types/bytesrepr/index.html>`_ to find the latest "
"APIs for deserialization."
msgstr ""
"**Note** : Ce résultat est retourné sous forme d'octets. Ces octets doivent "
"être désérialisés dans le bon CLType dans un contrat intelligent ou une "
"dApp. Reportez-vous à `casper-types <https://docs.rs/casperlabs-"
"types/latest/casperlabs_types/bytesrepr/index.html>`_ pour trouver les "
"dernières API de désérialisation."

#: ../../dapp-dev-guide/calling-contracts.rst:113
msgid "Calling a Contract by Name & Entry Point"
msgstr "Appeler un contrat par nom et point d'entrée"

#: ../../dapp-dev-guide/calling-contracts.rst:115
msgid ""
"To call a contract by its name, run the ``put-deploy`` command using the "
"``session-name`` option:"
msgstr ""
"Pour appeler un contrat par son nom, exécutez la commande ``put-deploy`` en "
"utilisant l'option ``session-name`` :"

#: ../../dapp-dev-guide/calling-contracts.rst:121
msgid ""
"It is possible to create entry points in the contract, which you can invoke "
"while the contract lives on the blockchain. The following code shows you an "
"example entry point:"
msgstr ""
"Il est possible de créer des points d'entrée dans le contrat, que vous "
"pouvez invoquer pendant que le contrat vit sur la blockchain. Le code "
"suivant vous montre un exemple de point d'entrée :"

#: ../../dapp-dev-guide/calling-contracts.rst:138
msgid "Calling a Contract by Hash and Entry Point"
msgstr "Appel d'un contrat par Hash et point d'entrée"

#: ../../dapp-dev-guide/calling-contracts.rst:140
msgid ""
"After deploying a contract and querying the global state, you can use a "
"contract's hash to call it in a new deploy. An entry point is required when "
"calling a contract by its hash."
msgstr ""
"Après avoir déployé un contrat et interrogé le global state, vous pouvez "
"utiliser le hash d'un contrat pour l'appeler dans un nouveau déploiement. Un"
" point d'entrée est nécessaire pour appeler un contrat par son hash."
