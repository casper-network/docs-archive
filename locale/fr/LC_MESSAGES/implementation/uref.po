# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# 
# Translators:
# muss abahmane <elmabahma@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: 2021-06-26 21:48+0000\n"
"Last-Translator: muss abahmane <elmabahma@gmail.com>, 2021\n"
"Language-Team: French (https://www.transifex.com/caspernetwork/teams/122124/fr/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: fr\n"
"Plural-Forms: nplurals=2; plural=(n > 1);\n"

#: ../../implementation/uref.rst:4
msgid "Unforgeable Reference (URef)"
msgstr "Référence infalsifiable (URef)  (Unforgeable Reference )"

#: ../../implementation/uref.rst:6
msgid ""
"This key type is used for storing any type of value except ``Account``. "
"Additionally, ``URef``\\ s used in contracts carry permission information to"
" prevent unauthorized usage of the value stored under the key. This "
"permission information is tracked by the runtime, meaning that if a "
"malicious contract attempts to produce a ``URef`` with permissions that the "
"contract does not have, we say the contract has attempted to “forge” the "
"unforgeable reference, and the runtime will raise a forged ``URef`` error. "
"Permissions for a ``URef`` can be given across contract calls, allowing data"
" stored under a ``URef`` to be shared in a controlled way. The 32-byte "
"identifier representing the key is generated randomly by the runtime (see "
":ref:`Execution Semantics <execution-semantics-urefs>` for more "
"information). The serialization for ``Access Rights`` that define the "
"permissions for ``URefs`` is detailed in the :ref:`CLValues<serialization-"
"standard-values>` section."
msgstr ""
"Ce type de clé est utilisé pour stocker tout type de valeur, à l'exception "
"de ``Account``. De plus, les ``URef``\\ utilisés dans les contrats portent "
"des informations de permission pour empêcher l'utilisation non autorisée de "
"la valeur stockée dans la clé. Ces informations de permission sont traquées "
"par le runtime, ce qui signifie que si un contrat malveillant tente de "
"produire un ``URef`` avec des permissions que le contrat n'a pas, nous "
"disons que le contrat a tenté de \"forger\" la référence infalsifiable, et "
"le runtime lèvera une erreur ``URef`` forgé. Les permissions pour un "
"``URef`` peuvent être données à travers des appels de contrat, permettant "
"aux données stockées sous un ``URef`` d'être partagées d'une manière "
"contrôlée. L'identifiant de 32 octets représentant la clé est généré de "
"manière aléatoire par le runtime (voir :ref:`Execution Semantics<execution-"
"semantics-urefs>` pour plus d'informations). La sérialisation des ``Access "
"Rights`` qui définissent les autorisations pour les ``URefs`` est détaillée "
"dans la section :ref:`CLValues<serialization-standard-values>`."

#: ../../implementation/uref.rst:20
msgid "Permissions for ``URef``\\ s"
msgstr "Autorisations pour ``URef`` "

#: ../../implementation/uref.rst:22
msgid ""
"In the runtime, a ``URef`` carries its permissions called ``AccessRights``. "
"Additionally, the runtime tracks what ``AccessRights`` would be valid for "
"each ``URef`` to have in each context. As mentioned above, if a malicious "
"contract attempts to use a ``URef`` with ``AccessRights`` that are not valid"
" in its context, then the runtime will raise an error; this is what enforces"
" the security properties of all URefs used as a key. By default, in all "
"contexts, all ``URef``\\ s are assumed invalid regardless of declared "
"AccessRights and are checked against the executing context for validity upon"
" each attempted usage in session or smart contract logic. A ``URef`` can "
"only be added to a context by the host logic, in the following ways:"
msgstr ""
"Dans le runtime, un ``URef`` porte ses autorisations appelées "
"``AccessRights``. De plus, le runtime surveille les ``AccessRights`` qui "
"seraient valables pour chaque ``URef`` dans chaque contexte. Comme mentionné"
" plus haut, si un contrat malveillant tente d'utiliser un ``URef`` avec des "
"``AccessRights`` qui ne sont pas valides dans son contexte, alors le runtime"
" lancera une erreur ; c'est ce qui permet d'appliquer les propriétés de "
"sécurité de toutes les URefs utilisées comme clé. Par défaut, dans tous les "
"contextes, toutes les ``URef`` sont considérées comme non valides, quels que"
" soient les AccessRights déclarés, et leur validité est vérifiée dans le "
"contexte d'exécution à chaque tentative d'utilisation dans la logique de "
"session ou de contrat intelligent. Un ``URef`` ne peut être ajouté à un "
"contexte que par la logique de l'hôte, de la manière suivante :"

#: ../../implementation/uref.rst:31
msgid "it can exist in a set of “known” ``URef``\\ s"
msgstr "il peut exister dans un ensemble de ``URef``  \"connus\"."

#: ../../implementation/uref.rst:32
msgid "it can be freshly created by the runtime via the ``new_uref`` function"
msgstr "il peut être créé par le runtime via la fonction ``new_uref``."

#: ../../implementation/uref.rst:33
msgid ""
"for called contracts, it can be passed in by the caller via the arguments to"
" ``call_contract``"
msgstr ""
"pour les contrats appelés, il peut être passé par l'appelant via les "
"arguments de ``call_contract``"

#: ../../implementation/uref.rst:35
msgid ""
"it can be returned to the caller from ``call_contract`` via the ``ret`` "
"function"
msgstr ""
"il peut être retourné à l'appelant depuis ``call_contract`` via la fonction "
"``ret``."

#: ../../implementation/uref.rst:38
msgid ""
"Note: that only valid ``URef``\\ s may be added to the known ``URef``\\ s or"
" cross call boundaries; this means the system cannot be tricked into "
"accepting a forged ``URef`` by getting it through a contract or stashing it "
"in the known ``URef``\\ s."
msgstr ""
"Remarque : seuls les ``URef`` valides peuvent être ajoutés aux ``URef`` "
"connus ou traverser les frontières d'appel ; cela signifie que le système ne"
" peut pas être amené à accepter un ``URef`` falsifié en l'obtenant par un "
"contrat ou en le cachant dans les ``URef`` connus."

#: ../../implementation/uref.rst:42
msgid ""
"The ability to pass ``URef``\\ s between contexts via ``call_contract`` / "
"``ret``, allows them to be used to share state among a fixed number of "
"parties while keeping it private from all others."
msgstr ""
"La possibilité de passer des ``URef`` entre contextes via ``call_contract`` "
"/ ``ret``, permet de les utiliser pour partager un état entre un nombre fixe"
" de parties tout en le gardant privé de toutes les autres."
