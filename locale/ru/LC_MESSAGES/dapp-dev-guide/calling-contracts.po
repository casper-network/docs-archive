# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# 
# Translators:
# David Tsaritov <tsaritov@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: 2021-06-26 21:45+0000\n"
"Last-Translator: David Tsaritov <tsaritov@gmail.com>, 2021\n"
"Language-Team: Russian (https://www.transifex.com/caspernetwork/teams/122124/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../dapp-dev-guide/calling-contracts.rst:2
msgid "Calling Contracts"
msgstr "Вызов файлов контрактов"

#: ../../dapp-dev-guide/calling-contracts.rst:4
msgid ""
"The most efficient way to use blockchain is to store (install) your contract"
" on the system and then call it. This section outlines the steps to do this."
msgstr ""
"Наиболее эффективный способ использования блокчейн - хранение (внесение) "
"контрактов в систему и в дальнейшем - их вызов. "

#: ../../dapp-dev-guide/calling-contracts.rst:7
msgid "Installing a Smart Contract"
msgstr "Установка смарт-контракта"

#: ../../dapp-dev-guide/calling-contracts.rst:9
msgid ""
"First, set up the contract name so you can call it using the name in "
"subsequent deploys. The following code sample uses ``sample_contract`` as "
"the contract name."
msgstr ""
"Для начала установите название для контракта, чтобы в дальнейшем вызывать "
"его, вводя имя в последующих развертываниях. Данный сэмпл код использует в "
"качестве имени ``sample_contract``. "

#: ../../dapp-dev-guide/calling-contracts.rst:25
msgid ""
"Next, deploy the smart contract using the ``put-deploy`` command and send in"
" the compiled wasm as ``--session code``."
msgstr ""
"Затем разверните смарт-контракт, используя команду ``put-deploy`` и "
"отправьте в компилированный wasm файл в виде ``--session code``."

#: ../../dapp-dev-guide/calling-contracts.rst:29
msgid "Querying Global State for the Address of a Contract"
msgstr "Запрос адреса контракта через глобальное состояние"

#: ../../dapp-dev-guide/calling-contracts.rst:31
msgid ""
"The ``query-state`` command is a generic query against `global state "
"<https://docs.casperlabs.io/en/latest/glossary/G.html#global-state>`_. "
"Earlier, we queried global state for the account's main purse. Here, we "
"query the state of a contract. We can do so by including the contract "
"address rather than the account public key in the ``query-state`` command."
msgstr ""
"Команда ``query-state`` - это общий запрос против `global state "
"<https://docs.casperlabs.io/en/latest/glossary/G.html#global-state>`_. Ранее"
" мы запросили главный кошелек счета через глобальное состояние. Здесь же мы "
"запрашиваем состояние контракта. Это мы можем сделать добавляя в команду "
"``query-state`` адрес контракта, а не публичный ключ счета. "

#: ../../dapp-dev-guide/calling-contracts.rst:33
msgid ""
"Here we query to get the address of an ERC20 contract from Global State."
msgstr ""
"Здесь мы делаем запрос на получение адреса контракта ERC20 из глобального "
"состояния. "

#: ../../dapp-dev-guide/calling-contracts.rst:36
msgid "Step 1: Get the Latest Global State Hash"
msgstr "Шаг 1: получение последнего хеша из глобального состояния "

#: ../../dapp-dev-guide/calling-contracts.rst:38
msgid ""
"We need to obtain the global state hash after our contract has been deployed"
" to the network."
msgstr ""
"Нам требуется получить хеш глобального состояния после того, как наш "
"контракт был развернут в сети. "

#: ../../dapp-dev-guide/calling-contracts.rst:45
msgid "Step 2: Query State"
msgstr "Шаг 2: состояние запроса"

#: ../../dapp-dev-guide/calling-contracts.rst:47
msgid ""
"Take the global state hash from Step 1 and include it here, along with the "
"account public key that created the contract."
msgstr ""
"Берем полученный из глобального состояния хеш из Шага 1 и вставляем сюда "
"совместно с публичным ключом счета, который открыл контракт. "

#: ../../dapp-dev-guide/calling-contracts.rst:54
msgid "Example Result"
msgstr "Пример результата"

#: ../../dapp-dev-guide/calling-contracts.rst:56
msgid ""
"If there is a contract stored in an account, it will appear under ``named-"
"keys``."
msgstr ""
"Если на счету имеется сохраненный контракт, он появится под ``named-keys``."

#: ../../dapp-dev-guide/calling-contracts.rst:87
msgid "Step 3: Query the contract State"
msgstr "Шаг 3: запрос состояния контракта"

#: ../../dapp-dev-guide/calling-contracts.rst:89
msgid ""
"Now that we have the hash of the contract, we can query the contract's "
"internal state. To do this, we pass in the contract's hash and the global "
"state hash.  If we look at the ERC20 contract, we see a token name specified"
" as ``_name``.  We can query for the value stored here."
msgstr ""
"Когда у нас уже собран хеш контракта, мы можем запросить внутреннее "
"состояние контракта. Чтобы это сделать, мы передаем хеш контракта и хеш "
"глобального состояния. И если мы посмотрим на контракт ERC20, то увидим имя "
"токена, определенное как ``_name``. Теперь можем запросить вложенную "
"ценность. "

#: ../../dapp-dev-guide/calling-contracts.rst:95
msgid "And we should see something like this:"
msgstr "И мы увидим что-то подобное:"

#: ../../dapp-dev-guide/calling-contracts.rst:109
msgid ""
"**Note**: This result is returned as bytes. These bytes need to be "
"deserialized into the correct CLType in a smart contract or a dApp. Refer to"
" `casper-types <https://docs.rs/casperlabs-"
"types/latest/casperlabs_types/bytesrepr/index.html>`_ to find the latest "
"APIs for deserialization."
msgstr ""
"**Внимание**: здесь результат возвращается в битах. Эти биты должны быть "
"десериализованы в правильный формат CLType в смарт-контракте или в "
"децентрализованном приложении типа dApp. Обратитесь к `casper-types "
"<https://docs.rs/casperlabs-"
"types/latest/casperlabs_types/bytesrepr/index.html>`_ , чтобы найти "
"последние интерфейсы API для десериализации. "

#: ../../dapp-dev-guide/calling-contracts.rst:113
msgid "Calling a Contract by Name & Entry Point"
msgstr "Вызов контракта по имени и точке входа"

#: ../../dapp-dev-guide/calling-contracts.rst:115
msgid ""
"To call a contract by its name, run the ``put-deploy`` command using the "
"``session-name`` option:"
msgstr ""
"Чтобы вызвать контракт по его названию, запустите команду ``put-deploy``, "
"используя опцию ``session-name``:"

#: ../../dapp-dev-guide/calling-contracts.rst:121
msgid ""
"It is possible to create entry points in the contract, which you can invoke "
"while the contract lives on the blockchain. The following code shows you an "
"example entry point:"
msgstr ""
"Есть возможность создать точки входа для контракта, к которым можно "
"обращаться, пока контракт находится в блокчейн. Следующий код показывает "
"пример точки входа:"

#: ../../dapp-dev-guide/calling-contracts.rst:138
msgid "Calling a Contract by Hash and Entry Point"
msgstr "Вызов контракта через хеш и точку входа:"

#: ../../dapp-dev-guide/calling-contracts.rst:140
msgid ""
"After deploying a contract and querying the global state, you can use a "
"contract's hash to call it in a new deploy. An entry point is required when "
"calling a contract by its hash."
msgstr ""
"После развертывания контракта и запроса глобального состояния вы можете "
"использовать хеш контракта, чтобы вызвать его уже в новом развертывании. Для"
" вызова контракта через хеш требуется точка входа. "
