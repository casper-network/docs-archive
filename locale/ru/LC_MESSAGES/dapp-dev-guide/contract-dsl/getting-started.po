# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# 
# Translators:
# David Tsaritov <tsaritov@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: 2021-06-26 21:46+0000\n"
"Last-Translator: David Tsaritov <tsaritov@gmail.com>, 2021\n"
"Language-Team: Russian (https://www.transifex.com/caspernetwork/teams/122124/ru/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: ru\n"
"Plural-Forms: nplurals=4; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<12 || n%100>14) ? 1 : n%10==0 || (n%10>=5 && n%10<=9) || (n%100>=11 && n%100<=14)? 2 : 3);\n"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:2
msgid "The DSL Macros"
msgstr "Макросы DSL"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:4
msgid ""
"In this guide, we describe how to configure Rust smart contracts to use the "
"Casper DSL, making it easier for developers to start writing their smart "
"contracts."
msgstr ""
"В данном гайде мы объясняем, как конфигурировать смарт-контракты на Rust для"
" использования Casper DSL, что упрощает разработчикам начало работы с "
"написанием смарт-контрактов. "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:6
msgid ""
"The DSL consists of three macro directives dividing the boilerplate code "
"between *headers*, *constructor*, and *method blocks*. The smart contract is"
" being treated much like a class in OOP terms."
msgstr ""
"DSL состоит из трех макрос директив, разделяющих шаблонный код на заголовки "
"*headers*, конструктор *constructor*, и методические блоки *method blocks*. "
"В терминах объектно-ориентированного языка программирования, здесь смарт-"
"контракт понимается как класс. "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:8
msgid ""
"Here is a brief description of the three macros before we take a look at a "
"sample contract utilizing them:"
msgstr ""
"Ниже краткое описание трех макросов, прежде чем мы ознакомимся с сэмплом "
"контракта, использующего их:"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:11
msgid "Macro"
msgstr "Макрос"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:11
msgid "Instruction"
msgstr "Инструкция"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:11
msgid "Description"
msgstr "Описание"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:13
msgid "Contract"
msgstr "Контракт"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:13
msgid "``casperlabs_contract``"
msgstr "``casperlabs_contract``"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:13
msgid ""
"This macro generates the code for the headers for each of the entry points "
"that use it. It sits at the very top of the contract module and includes the"
" necessary code for contract execution."
msgstr ""
"Этот макрос генерирует код для заголовков для каждой из точек входа, "
"использующих его. Он расположен в самом верху модуля контракта и включает в "
"себя необходимый код для исполнения контракта. "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:14
msgid "Constructor"
msgstr "Конструктор"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:14
msgid "``casperlabs_constructor``"
msgstr "``casperlabs_constructor``"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:14
msgid ""
"This macro creates the code that sets up the contract in the runtime and "
"locates it when execution begins. Underneath the hood, this is the deploy "
"function that creates the contract entry point and stores the deploy hash "
"under a function name in the Casper runtime. You can think of the function "
"decorated by the constructor macro as the main function of the contract."
msgstr ""
"Этот макрос создает код, который устанавливает контракт в рабочую среду и "
"размещает его, когда начинается исполнение. По своей сути это развертывающая"
" функция, которая создает входную точку контракта и хранит хеш от "
"развертывания в виде функции внутри рабочей среды Casper. Можете считать эту"
" функцию, собранную конструктором, главной функцией контракта. "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:15
msgid "Method"
msgstr "Метод"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:15
msgid "``casperlabs_method``"
msgstr "``casperlabs_method``"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:15
msgid ""
"This macro creates an entry point for any function in your contract that you"
" wish to expose in the smart contract. Functions that are only used "
"internally should not be decorated with this macro. Continuing the OOP "
"metaphor, this directive would essentially be declaring a smart contract "
"function as being public."
msgstr ""
"Этот макрос создает точку входа для любой функции вашего контракта, которую "
"вы хотели бы раскрыть в смарт-контракте. Функции, которые используются "
"только внутри, не должны быть декорированы этим макросом. Если использовать "
"термины ООП, эта директива должна объявить функцию смарт-контракта "
"публичной. "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:19
msgid "Prerequisites"
msgstr "Пререквизиты"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:20
msgid ""
"The DSL relies upon working in a Rust contract, which means you need to have"
" your development environment up and running. In the `Getting Started "
"section <https://docs.casperlabs.io/en/latest/dapp-dev-guide/setup-of-rust-"
"contract-sdk.html>`_, we compiled and tested a sample contract to verify our"
" setup was functional. If you have not completed that section, please "
"complete it before continuing with this guide."
msgstr ""
"DSL опирается на работу внутри контракта на Rust, поэтому ваша среда "
"разработки должна быть запущена и работать. В секции `Getting Started "
"section <https://docs.casperlabs.io/en/latest/dapp-dev-guide/setup-of-rust-"
"contract-sdk.html>`_ мы компилировали и тестировали сэмпл контракта, чтобы "
"проверить функциональность нашего сетапа. Если вы не выполнили эту секцию, "
"пожалуйста сделайте это прежде чем продолжать работу с гайдом. "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:23
msgid "[Recommended] Getting the Macros"
msgstr "[Рекомендуется] Извлечение макросов"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:24
msgid ""
"If you are new to Casper development, we recommend following this guide "
"using the sample `Hello World <https://github.com/casper-ecosystem/hello-"
"world>`_ contract. This smart contract Rust file has all the macros in "
"place, and the configuration is already set up to import the macros for you."
msgstr ""
"Если вы новичок в разработке Casper, рекомендуем следовать данному гайду "
"используя семпл контракта Hello World <https://github.com/casper-ecosystem"
"/hello-world>`_ . Этот файл смарт-контракта на Rust уже содержит все "
"необходимые макросы, и конфигурация настроена под импорт ваших макросов. "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:27
msgid "[Advanced] Getting the Macros"
msgstr "[Продвинутые функции] Извлечение макросов"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:28
msgid ""
"If you already have been working with Casper contracts and you wish to "
"simply add the macros to your existing smart contract, then you can retrieve"
" the macros from `GitHub "
"<https://github.com/CasperLabs/casperlabs_contract_macro>`_."
msgstr ""
"Если вы уже работали со смарт-контрактами в среде Casper и вы хотите просто "
"добавить макросы в уже существующий смарт-контракт, вы можете вытащить "
"макросы из `GitHub "
"<https://github.com/CasperLabs/casperlabs_contract_macro>`_."

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:31
msgid "Importing the Macros"
msgstr "Импорт макросов"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:32
msgid ""
"The sample contract already has this done for you, but you should know how "
"to do it for future contracts. To import the macros, just include a line in "
"the ``Cargo.toml`` file in the *contract* folder of your smart contract. The"
" entry needs to appear in the *[dependencies]* section of the file. Then "
"``cargo`` will import the macros into your project when you build it."
msgstr ""
"Сэмпл контракта уже сделал это за вас, но на будущее вам необходимо знать, "
"как это делается. Чтобы импортировать макросы, добавьте строку в файл "
"``Cargo.toml`` в папке *contract* вашего смарт-контракта. Запись должна "
"появиться в секции файла *[dependencies]* . Затем ``cargo`` импортирует "
"макросы в ваш проект на этапе сборки. "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:34
msgid ""
"For example, if you placed the macros inside your project in a folder named "
"*contract_macro* next to the *contract* folder, you would add this line to "
"the dependencies section of the ``Cargo.toml`` file:"
msgstr ""
"Например, если вы поместили макросы внутри проекта в папке под названием "
"*contract_macro* следом за папкой *contract*, вы добавляете эту строку в "
"секцию зависимостей файла ``Cargo.toml`` :"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:41
msgid ""
"Alternatively, you can get the macros directly from Github without "
"downloading them:"
msgstr ""
"Как альтернатива, можно извлечь макросы напрямую из Github, не загружая их:"
"  "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:47
msgid ""
"This second approach is what the `Hello World <https://github.com/casper-"
"ecosystem/hello-world>`_ smart contract is utilizing, so if you are starting"
" there, it has already been done for you."
msgstr ""
"Этот второй подход как раз используется в смарт-контракте `Hello World "
"<https://github.com/casper-ecosystem/hello-world>`_ , так что если вы "
"начинаете оттуда, эта работа уже сделана за вас. "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:50
msgid "Using the DSL"
msgstr "Использование DSL "

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:51
msgid ""
"To use the DSL, simply add the following line to the *use section* of the "
"contract (usually found at the top of the file in *main.rs*):"
msgstr ""
"Чтобы использовать DSL просто добавьте следующую строку в секцию *use "
"section* контракта (обычно располагается в верхней части файла в *main.rs*):"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:58
msgid "Examining the Hello World Example"
msgstr "Проверка примера Hello World"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:59
msgid ""
"Clone the `Hello World <https://github.com/casper-ecosystem/hello-world>`_ "
"example contract and open the ``main.rs`` file. Examine the following "
"section:"
msgstr ""
"Клонируйте файл `Hello World <https://github.com/casper-ecosystem/hello-"
"world>`_ example contract and open the ``main.rs`` . Проверьте следующий "
"раздел:"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:92
msgid ""
"Notice that all three macros are being utilized and that the file is "
"relatively compact. This is a very simple contract that initializes a key "
"named *special_value* with the value *hello world* once the contract is "
"compiled and executed thanks to the constructor macro. The function *update*"
" is decorated with the ``casperlabs_method`` macro and will thus be "
"accessible for updating the value. However, notice that *set_key* is not "
"prefaced with the macro. Since this function is used internally, it does not"
" need to have an entry point in the Casper runtime."
msgstr ""
"Обратите внимание, что все три макроса применены и файл относительно "
"компактный. Это очень простой контракт, который запускает ключ под названием"
" *special_value* со значением *hello world*, как только контракт "
"скомпилирован и исполнен благодаря макросу-конструктору.  Функция *update* "
"оформляется макросом ``casperlabs_method`` дабы сделать доступным обновление"
" значений. Также обратите внимание, что перед *set_key* нет макроса. Так как"
" эта функция используется внутри, ей не требуется точка входа в рабочей "
"среде Casper."
