# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../dapp-dev-guide/contract-dsl/index.rst:10
msgid "Introduction"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/index.rst:2
msgid "The Casper DSL"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/index.rst:4
msgid ""
"The Casper Domain-Specific Language (DSL) for writing smart contracts is "
"a tool to help developers more easily and quickly write human-readable "
"code. It is a series of macros designed around object-oriented "
"programming (OOP) principles. The macros conceal much of the repetitive "
"boilerplate code necessary for proper contract compilation, operating "
"much like templates seen in other object-oriented languages."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/index.rst:6
msgid ""
"However, if you are an experienced Rust developer, you may find that you "
"want to forgo using the DSL as you start getting familiar with Casper "
"development. For advanced use cases, the boilerplate code could very well"
" become sub-optimal. Regardless, though, we recommend that you start with"
" the DSL to see the typical workflow while you are getting familiar with "
"the ecosystem."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/index.rst:8
msgid "**Table of Contents**"
msgstr ""

