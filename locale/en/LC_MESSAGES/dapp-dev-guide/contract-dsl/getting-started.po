# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:2
msgid "The DSL Macros"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:4
msgid ""
"In this guide, we describe how to configure Rust smart contracts to use "
"the Casper DSL, making it easier for developers to start writing their "
"smart contracts."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:6
msgid ""
"The DSL consists of three macro directives dividing the boilerplate code "
"between *headers*, *constructor*, and *method blocks*. The smart contract"
" is being treated much like a class in OOP terms."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:8
msgid ""
"Here is a brief description of the three macros before we take a look at "
"a sample contract utilizing them:"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:11
msgid "Macro"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:11
msgid "Instruction"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:11
msgid "Description"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:13
msgid "Contract"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:13
msgid "``casperlabs_contract``"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:13
msgid ""
"This macro generates the code for the headers for each of the entry "
"points that use it. It sits at the very top of the contract module and "
"includes the necessary code for contract execution."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:14
msgid "Constructor"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:14
msgid "``casperlabs_constructor``"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:14
msgid ""
"This macro creates the code that sets up the contract in the runtime and "
"locates it when execution begins. Underneath the hood, this is the deploy"
" function that creates the contract entry point and stores the deploy "
"hash under a function name in the Casper runtime. You can think of the "
"function decorated by the constructor macro as the main function of the "
"contract."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:15
msgid "Method"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:15
msgid "``casperlabs_method``"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:15
msgid ""
"This macro creates an entry point for any function in your contract that "
"you wish to expose in the smart contract. Functions that are only used "
"internally should not be decorated with this macro. Continuing the OOP "
"metaphor, this directive would essentially be declaring a smart contract "
"function as being public."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:19
msgid "Prerequisites"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:20
msgid ""
"The DSL relies upon working in a Rust contract, which means you need to "
"have your development environment up and running. In the `Getting Started"
" section <https://docs.casperlabs.io/en/latest/dapp-dev-guide/setup-of-"
"rust-contract-sdk.html>`_, we compiled and tested a sample contract to "
"verify our setup was functional. If you have not completed that section, "
"please complete it before continuing with this guide."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:23
msgid "[Recommended] Getting the Macros"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:24
msgid ""
"If you are new to Casper development, we recommend following this guide "
"using the sample `Hello World <https://github.com/casper-ecosystem/hello-"
"world>`_ contract. This smart contract Rust file has all the macros in "
"place, and the configuration is already set up to import the macros for "
"you."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:27
msgid "[Advanced] Getting the Macros"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:28
msgid ""
"If you already have been working with Casper contracts and you wish to "
"simply add the macros to your existing smart contract, then you can "
"retrieve the macros from `GitHub "
"<https://github.com/CasperLabs/casperlabs_contract_macro>`_."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:31
msgid "Importing the Macros"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:32
msgid ""
"The sample contract already has this done for you, but you should know "
"how to do it for future contracts. To import the macros, just include a "
"line in the ``Cargo.toml`` file in the *contract* folder of your smart "
"contract. The entry needs to appear in the *[dependencies]* section of "
"the file. Then ``cargo`` will import the macros into your project when "
"you build it."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:34
msgid ""
"For example, if you placed the macros inside your project in a folder "
"named *contract_macro* next to the *contract* folder, you would add this "
"line to the dependencies section of the ``Cargo.toml`` file:"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:41
msgid ""
"Alternatively, you can get the macros directly from Github without "
"downloading them:"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:47
msgid ""
"This second approach is what the `Hello World <https://github.com/casper-"
"ecosystem/hello-world>`_ smart contract is utilizing, so if you are "
"starting there, it has already been done for you."
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:50
msgid "Using the DSL"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:51
msgid ""
"To use the DSL, simply add the following line to the *use section* of the"
" contract (usually found at the top of the file in *main.rs*):"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:58
msgid "Examining the Hello World Example"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:59
msgid ""
"Clone the `Hello World <https://github.com/casper-ecosystem/hello-"
"world>`_ example contract and open the ``main.rs`` file. Examine the "
"following section:"
msgstr ""

#: ../../dapp-dev-guide/contract-dsl/getting-started.rst:92
msgid ""
"Notice that all three macros are being utilized and that the file is "
"relatively compact. This is a very simple contract that initializes a key"
" named *special_value* with the value *hello world* once the contract is "
"compiled and executed thanks to the constructor macro. The function "
"*update* is decorated with the ``casperlabs_method`` macro and will thus "
"be accessible for updating the value. However, notice that *set_key* is "
"not prefaced with the macro. Since this function is used internally, it "
"does not need to have an entry point in the Casper runtime."
msgstr ""

