# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../dapp-dev-guide/keys.rst:2
msgid "Working with Cryptographic Keys"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:4
msgid ""
"The Casper platform supports two types of signatures for creating "
"accounts and signing transactions: ``secp256k1`` and ``ed25519``. You can"
" generate keys using the Casper client in both formats. It is also "
"possible to work with existing Ethereum keys."
msgstr ""

#: ../../dapp-dev-guide/keys.rst:7
msgid "Key Generation"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:10
msgid "Ethereum Keys"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:11
msgid ""
"To create ``secp256k1`` keys, commonly known as Ethereum keys, follow "
"these steps:"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:26
msgid ""
"Looking at the public-key-hex file, we see that ``secp256k1`` public hex "
"keys start with `02` in Casper:"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:35
msgid "EdDSA Keys"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:36
msgid ""
"It is also possible to create ``ed25519`` keys, which use the Edwards-"
"curve Digital Signature Algorithm (EdDSA). To generate EdDSA keys, follow"
" these steps:"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:51
msgid ""
"Looking at the public-key-hex file, we see that keys of this type are "
"pre-pended with `01`:"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:60
msgid "Working with Existing Ethereum Keys"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:62
msgid ""
"It is also possible to use existing Ethereum keys in Casper. Here is an "
"example set of Ethereum keys and their corresponding address:"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:70
msgid ""
"To use existing Ethereum keys, the Casper VM  needs to know that the key "
"is a ``secp256k1`` type."
msgstr ""

#: ../../dapp-dev-guide/keys.rst:72
msgid ""
"The Rust `casper-client` provides an example of how this works. Pre-"
"pending the public key with a `02` indicates the key is a ``secp256k1`` "
"key."
msgstr ""

#: ../../dapp-dev-guide/keys.rst:74
msgid "**Example**:"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:76
msgid "The following transaction sends 100 CSPR."
msgstr ""

#: ../../dapp-dev-guide/keys.rst:82
msgid ""
"The Rust `casper-client` requires the secret key to be in `PEM` format to"
" send a transaction from this account. If you want to use existing "
"Ethereum keys with the Rust client, a conversion to `PEM` format is "
"needed."
msgstr ""

#: ../../dapp-dev-guide/keys.rst:84
msgid ""
"The following example is a JS script that generates a `PEM` file, using "
"`key encoder <https://github.com/blockstack/key-encoder-js>`_ and "
"node.js. To install these components, do the following:"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:92
msgid ""
"Then create the JS script ``convert-to-pem.js`` using `vi` or `nano` and "
"include this content:"
msgstr ""

#: ../../dapp-dev-guide/keys.rst:102
msgid ""
"Then run the script using node.js. Name the secret key something "
"different."
msgstr ""

#: ../../dapp-dev-guide/keys.rst:108
msgid "To view the secret key, use `cat`:"
msgstr ""

