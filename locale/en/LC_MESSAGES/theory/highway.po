# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../theory/highway.rst:2
msgid "Highway"
msgstr ""

#: ../../theory/highway.rst:5
msgid "Motivation"
msgstr ""

#: ../../theory/highway.rst:7
msgid ""
"For a practically useful decentralized consensus protocol, proofs of two "
"theorems must be provided:"
msgstr ""

#: ../../theory/highway.rst:10
msgid ""
"**safety:** a theorem saying that nodes cannot come up with conflicting "
"decisions"
msgstr ""

#: ../../theory/highway.rst:11
msgid "**liveness:** a theorem saying that nodes will keep making decisions"
msgstr ""

#: ../../theory/highway.rst:12
msgid "forever (so, that the blockchain will grow forever)"
msgstr ""

#: ../../theory/highway.rst:14
msgid ""
"The First theorem is just another name for the machinery of finality "
"detectors. And it is the easy one. The Second theorem tends to be "
"substantially harder to prove and these difficulties are showing up in "
"pretty much any blockchain design studied."
msgstr ""

#: ../../theory/highway.rst:19
msgid ""
"Despite the fact that the “naive” design of a blockchain described in the"
" previous chapter can actually be implemented and its observed behavior "
"is promising, so far we were not successful trying to prove the liveness "
"theorem for it."
msgstr ""

#: ../../theory/highway.rst:23
msgid ""
"As part of this effort, we were actively looking for some hardening of "
"assumptions that would lead to a provably live protocol while maintaining"
" our key goals intact; i.e. to have a permissionless, fully "
"decentralized, Casper-based blockchain that is compatible with broadcast-"
"based message passing and a partially synchronous network."
msgstr ""

#: ../../theory/highway.rst:29
msgid ""
"**Highway** is one of such attempts we found particularly promising. This"
" is a variant of Casper where the liveness theorem is achieved via "
"constraining message production with a pseudorandomly generated sequence "
"of leaders that, in effect leads to a predictable structure of the "
"emerging blockdag."
msgstr ""

#: ../../theory/highway.rst:35
msgid "Innovations in a nutshell"
msgstr ""

#: ../../theory/highway.rst:37
msgid ""
"We generally see Highway as an evolution from Naive Casper Blockchain "
"(later abbreviated as NCB),  where key modifications are:"
msgstr ""

#: ../../theory/highway.rst:40
msgid "Organize blocks creation around a pseudorandomly generated sequence of"
msgstr ""

#: ../../theory/highway.rst:41
msgid ""
"leaders. Only a leader can produce a block. -  Use variable length of "
"rounds based on the :math:`2^n` round length idea so that the blockchain "
"network can self-adjust to achieve optimal performance. -  Replace "
"continuous bonding/unbonding with an era-based solution. This is "
"necessary to keep the solution secure (so that attackers cannot tamper "
"with the leader sequence generator)."
msgstr ""

#: ../../theory/highway.rst:49
msgid "New requirements"
msgstr ""

#: ../../theory/highway.rst:51
msgid ""
"Interestingly, in comparison to NCB, we need only one new assumption, "
"although a tough one - we need that validators have well synchronized "
"real time clocks."
msgstr ""

#: ../../theory/highway.rst:54
msgid ""
"How to achieve such real-time clocks and how to secure the network "
"against intended or unintended clock drift is, in general, beyond the "
"scope of this specification. However, we give some hints on certain "
"simple precautions to be taken."
msgstr ""

#: ../../theory/highway.rst:59
msgid "Why “Highway”"
msgstr ""

#: ../../theory/highway.rst:61
msgid ""
"To intuitively capture the key idea of the :math:`2^n` round length "
"trick, we once imagined a highway, well - a mathematical highway with "
"infinitely many lanes. Lanes are numbered with integers (all integers, "
"also negative)."
msgstr ""

#: ../../theory/highway.rst:65
msgid ""
"This highway is different because movement on it takes place in the form "
"of hops, while the speed of all cars is constant. In any given lane "
":math:`n`, a car has to make :math:`2^n` hops to cover a unit distance."
msgstr ""

#: ../../theory/highway.rst:69
msgid ""
"Therefore, if you switch to the lane on your left-hand side, you increase"
" the frequency of your hopping by a factor of 2. If you switch to your "
"right-hand side, you decrease the frequency by a factor of 2."
msgstr ""

#: ../../theory/highway.rst:73
msgid ""
"You meet cars from the lane on your left-hand side on every jump you "
"make. For cars on your right-hand side, you meet only every second hop."
msgstr ""

#: ../../theory/highway.rst:77
msgid "Messages structure"
msgstr ""

#: ../../theory/highway.rst:80
msgid ""
"While we generally keep messages structure established in NCB, we require"
" the"
msgstr ""

#: ../../theory/highway.rst:80
msgid "following additional fields:"
msgstr ""

#: ../../theory/highway.rst:82
msgid "for every message:"
msgstr ""

#: ../../theory/highway.rst:84
msgid "**round-id: Int** - keeps the round id that this message belongs to"
msgstr ""

#: ../../theory/highway.rst:85
msgid "**real-time-stamp: Int** - keeps the actual time of creating this message"
msgstr ""

#: ../../theory/highway.rst:86
msgid ""
"taken from the real-time clock of the sender (must be creation as opposed"
" to sending because all fields are sealed with a digital signature)"
msgstr ""

#: ../../theory/highway.rst:89
msgid "for blocks only:"
msgstr ""

#: ../../theory/highway.rst:91
msgid "**magic-bit: Bit** - this is one bit field needed for leaders pseudorandom"
msgstr ""

#: ../../theory/highway.rst:92
msgid "generator seed"
msgstr ""

#: ../../theory/highway.rst:94
msgid "for ballots only:"
msgstr ""

#: ../../theory/highway.rst:96
msgid "**message-type: Enum** - one of: LAMBDA_RESPONSE, OMEGA"
msgstr ""

#: ../../theory/highway.rst:98
msgid "Note: The semantics of these fields is explained later in this document."
msgstr ""

#: ../../theory/highway.rst:101
msgid "Liveness strategy"
msgstr ""

#: ../../theory/highway.rst:104
msgid "Ticks"
msgstr ""

#: ../../theory/highway.rst:106
msgid ""
"Validators see time in a discrete way, namely - as the number of ticks "
"since some hardcoded point of real time. For simplicity, we assume that "
"ticks are just milliseconds since “epoch” -- the Unix time representation"
" standard."
msgstr ""

#: ../../theory/highway.rst:111
msgid "Leaders"
msgstr ""

#: ../../theory/highway.rst:114
msgid ""
"There is a **leader** assigned to every tick. A leader is always one from"
" the"
msgstr ""

#: ../../theory/highway.rst:114
msgid "currently staked validators."
msgstr ""

#: ../../theory/highway.rst:116
msgid ""
"The precise algorithm of calculating who is the leader of given tick is "
"pretty convoluted and needs a machinery that we will establish step-by-"
"step. For now, it is enough to say that a validator has a recipe to "
"calculate the leader of every tick."
msgstr ""

#: ../../theory/highway.rst:122
msgid "Rounds"
msgstr ""

#: ../../theory/highway.rst:125
msgid ""
"In a leader based system, rounds are inevitable, because a leader cannot "
"lead"
msgstr ""

#: ../../theory/highway.rst:125
msgid "forever. Hence, it is supposed to lead during a single round."
msgstr ""

#: ../../theory/highway.rst:127
msgid ""
"Picking a fixed round length obviously leads to scaling issues. On the "
"other hand, adjusting round length on-the-fly is tricky."
msgstr ""

#: ../../theory/highway.rst:130
msgid ""
"In Highway, we approach the problem of automatic adjustment of round "
"length in a unique and unusual way. Every validator selects a private "
"value :math:`n \\in Int`, which we call **round exponent**. Over time, a "
"validator will be automatically adjusting this value to optimize its "
"performance and the performance of the blockchain."
msgstr ""

#: ../../theory/highway.rst:137
msgid ""
"Given a round exponent :math:`n`, the length of a round that a validator "
"uses"
msgstr ""

#: ../../theory/highway.rst:137
msgid "for its operation is :math:`2^n` ticks."
msgstr ""

#: ../../theory/highway.rst:139
msgid ""
"So, effectively, rounds live in sort of parallel worlds (“lanes of the "
"highway”), where all validators with same round exponent :math:`n` have "
"the same schedule of rounds. On the other hand, if we compare two "
"validators, **Alice** and **Bob**, **Alice** using round exponent "
":math:`n`, **Bob** using round exponent :math:`m`, and assuming :math:`n "
"< m`, then:"
msgstr ""

#: ../../theory/highway.rst:145
msgid "**Alice** is :math:`2^{m-n}` faster than **Bob**"
msgstr ""

#: ../../theory/highway.rst:146
msgid "**Alice** participates in all rounds that **Bob** knows about"
msgstr ""

#: ../../theory/highway.rst:147
msgid "**Bob** participates only in some rounds that **Alice** knows about - once"
msgstr ""

#: ../../theory/highway.rst:148
msgid "every :math:`2^{m-n}` **Alice**\\ ’s rounds"
msgstr ""

#: ../../theory/highway.rst:150
msgid ""
"A round is identified by the tick at which it starts. Of course "
"validators with different round exponents will differ in perspective on "
"the length of this round."
msgstr ""

#: ../../theory/highway.rst:154
msgid ""
"**Example:** Alice has round exponent 5. Bob has round exponent 7. So, in"
" Alice’s world, rounds have length 32 ticks, while in Bob’s world rounds "
"have length 128 ticks. Timepoint 2019-09-13T13:13:13.088Z corresponds "
"with tick 1568380393088 and is the beginning of a round for both Alice "
"and Bob. But, in Alice’s world, this round will only last for 32 "
"milliseconds, while for Bob this round will last for 128 milliseconds."
msgstr ""

#: ../../theory/highway.rst:162
msgid "Validator operation"
msgstr ""

#: ../../theory/highway.rst:164
msgid ""
"Contrary to NCB, the way ballots are used in Highway is more "
"sophisticated."
msgstr ""

#: ../../theory/highway.rst:166
msgid ""
"In NCB a validator only produces ballots to continue participation in "
"**b-game** after doing unbonding. In Highway, only the round leader is "
"allowed to produce blocks. So if I am not the leader of current round, I "
"am going to produce only ballots."
msgstr ""

#: ../../theory/highway.rst:171
msgid ""
"In details, local state and operation of a validator is similar to NCB. "
"The only difference is that we impose very precise rules on when and how "
"to create new messages."
msgstr ""

#: ../../theory/highway.rst:176
msgid "Rule 1: ignore rounds you cannot see"
msgstr ""

#: ../../theory/highway.rst:178
msgid ""
"I operate as if the world is simple and everybody uses the same round "
"exponent as I am using. Which means that I completely ignore the "
"existence of rounds starting at ticks not divisible by :math:`2^n`, where"
" :math:`n` is my round exponent."
msgstr ""

#: ../../theory/highway.rst:184
msgid "Rule 2: follow the leader sequence"
msgstr ""

#: ../../theory/highway.rst:187
msgid ""
"For every round I use the leader's pseudorandom sequence to figure out "
"the id"
msgstr ""

#: ../../theory/highway.rst:187
msgid "of a validator which is the leader of this round."
msgstr ""

#: ../../theory/highway.rst:190
msgid "Rule 3: lambda message"
msgstr ""

#: ../../theory/highway.rst:192
msgid ""
"If I am the leader of current round, I produce new block :math:`b`, using"
" all"
msgstr ""

#: ../../theory/highway.rst:193
msgid "tips of my local j-dag as justifications of :math:`b`. Then I broadcast"
msgstr ""

#: ../../theory/highway.rst:194
msgid ":math:`b` to all validators."
msgstr ""

#: ../../theory/highway.rst:198
msgid ""
"We call this message **the lambda message**. There is only one lambda "
"message"
msgstr ""

#: ../../theory/highway.rst:197
msgid ""
"in every round. Every block :math:`b` is a lambda message of some round, "
"namely round :math:`b.round\\_id`."
msgstr ""

#: ../../theory/highway.rst:201
msgid "Rule 4: lambda response message"
msgstr ""

#: ../../theory/highway.rst:203
msgid ""
"If I am not the leader of the current round, I set up a handler for "
"receiving the lambda message from this round’s leader. This handler waits"
" for the lambda message but only up to the end of the current round. If "
"the lambda message arrives before the end of the current round, I create "
"a ballot taking as its justifications only the lambda message and my last"
" message (if I have one)."
msgstr ""

#: ../../theory/highway.rst:210
msgid "Rule 5: omega message"
msgstr ""

#: ../../theory/highway.rst:212
msgid ""
"Let :math:`j` be the id of current round. At tick :math:`j + "
"omega\\_delay \\cdot 2^n` I create a ballot :math:`b` using all tips of "
"my local j-dag as justifications of :math:`b`."
msgstr ""

#: ../../theory/highway.rst:216
msgid ""
":math:`omega\\_delay \\in(0,1)` is a blockchain parameter - to be picked "
"by simulation and then hardcoded."
msgstr ""

#: ../../theory/highway.rst:220
msgid "Adjusting round exponent"
msgstr ""

#: ../../theory/highway.rst:222
msgid ""
"We need to make it clear what the semantics is of adjusting the round "
"exponent. First, we want to say that the mechanics of messages creation "
"requires that a validator knows what exponent he was using at any tick. "
"This can be formalized by saying that for any validator :math:`v` there "
"is a function :math:`n_v: Int \\to Int`, assigning an exponent to be used"
" by :math:`v` in any given tick."
msgstr ""

#: ../../theory/highway.rst:229
msgid ""
"When a validator wants to adjust its round exponent, this must be done at"
" a tick that happens to be the boundary of both the old-length round and "
"the new-length round. Mathematically this transforms into saying that "
":math:`n_v (i) = n_v(i-1)` unless :math:`i` is a multiple of both "
":math:`2^{n_v(i)}` and :math:`2^{n_v(i-1)}`."
msgstr ""

#: ../../theory/highway.rst:238
msgid ""
"Auto-adjusting of round lengths is based on an internal finalizer which "
"every"
msgstr ""

#: ../../theory/highway.rst:236
msgid ""
"validator must maintain. This finalizer would run with the fault "
"tolerance threshold :math:`ftt` set as blockchain-wide constant "
"(:math:`ftt=1\\%` sounds like a good candidate value here) and "
":math:`acknowledgement\\_level=1`."
msgstr ""

#: ../../theory/highway.rst:240
msgid "Now, we finally can define the strategy of auto-adjusting round exponents."
msgstr ""

#: ../../theory/highway.rst:242
msgid ""
"We assume there are two blockchain-wide integer constants, both "
"expressing the number of rounds:"
msgstr ""

#: ../../theory/highway.rst:245
msgid "**round-acceleration-period** - every that-many-rounds a validator"
msgstr ""

#: ../../theory/highway.rst:246
msgid ""
"decreases its round exponent by :math:`1` (unconditionally) -  **round-"
"slowdown-period** - if a validator observes that many consecutive rounds "
"with the lambda message from the round leader not getting finalized, it "
"increases its round exponent by 1"
msgstr ""

#: ../../theory/highway.rst:252
msgid "Eras"
msgstr ""

#: ../../theory/highway.rst:255
msgid "The need for eras"
msgstr ""

#: ../../theory/highway.rst:257
msgid ""
"The idea of of eras is to keep the validator weights map constant for a "
"longer period of time (e.g., a week). Otherwise, it is rather difficult "
"to establish a pseudorandom leaders sequence all validators agree on. "
"Eras also plays a crucial role in making the leader selection resistant "
"to attack."
msgstr ""

#: ../../theory/highway.rst:263
msgid "Boundary of an era"
msgstr ""

#: ../../theory/highway.rst:265
msgid ""
"**Era length** is just a parameter of the blockchain - expressed as a "
"number of ticks. We expect a reasonable era length might be 604800000, "
"which is one week."
msgstr ""

#: ../../theory/highway.rst:268
msgid ""
"A message :math:`m` belongs to an era deduced by knowing the era length "
"and looking at :math:`m.round\\_id`."
msgstr ""

#: ../../theory/highway.rst:272
msgid "Critical blocks"
msgstr ""

#: ../../theory/highway.rst:274
msgid ""
"Round ids are really Unix timestamps, so main-tree can be now imagined "
"with time-axis overlayed."
msgstr ""

#: ../../theory/highway.rst:277
msgid ""
"In every era, there are two ticks (with a distance fixed relative to the "
"beginning of an era):"
msgstr ""

#: ../../theory/highway.rst:280
msgid "**booking-point**"
msgstr ""

#: ../../theory/highway.rst:281
msgid "**key-point**"
msgstr ""

#: ../../theory/highway.rst:283
msgid ""
"These points are blockchain parameters and **key-point** must be strictly"
" bigger than **booking-point**."
msgstr ""

#: ../../theory/highway.rst:286
msgid ""
"Let :math:`era\\_start: Int \\to Int` be a function that assigns to every"
" tick the beginning of an era this tick belongs to. This function can "
"easily be calculated as:"
msgstr ""

#: ../../theory/highway.rst:290
msgid "era\\_start(t) = (t / era\\_length) * era\\_length"
msgstr ""

#: ../../theory/highway.rst:295
msgid "… where the division is integer division."
msgstr ""

#: ../../theory/highway.rst:297
msgid ""
"**Booking block** is any block :math:`b` such that both following "
"conditions hold:"
msgstr ""

#: ../../theory/highway.rst:299
msgid ""
":math:`b.round\\_id \\geqslant era\\_start(b.round\\_id) + "
"booking\\_point`"
msgstr ""

#: ../../theory/highway.rst:300
msgid ""
":math:`b.main\\_parent.round\\_id < era\\_start(b.round\\_id) + "
"booking\\_point`"
msgstr ""

#: ../../theory/highway.rst:302
msgid ""
"It can be explained as the idea that on any path of the main-tree, "
"booking block is the first block to cross the time defined by **booking-"
"point**, where we consider “time of a block” to be the tick of the "
"beginning of its era."
msgstr ""

#: ../../theory/highway.rst:306
msgid "By analogy, we are defining a **key block** concept."
msgstr ""

#: ../../theory/highway.rst:309
msgid "Leaders sequence"
msgstr ""

#: ../../theory/highway.rst:311
msgid ""
"To have the sequence of leaders that all validators calculate in the same"
" way, we only need:"
msgstr ""

#: ../../theory/highway.rst:314
msgid ""
"1. Canonical sorting of validators so that a weights map can be converted"
" to an array of validators in the canonical way. 2. Agreement on "
"pseudorandom number generator to be used by all validators. 3. "
"Pseudorandom generator seed."
msgstr ""

#: ../../theory/highway.rst:319
msgid ""
"For (1) sorting by validator ids can be used. (2) can be hardcoded. So it"
" is all about the way we pick the seed."
msgstr ""

#: ../../theory/highway.rst:323
msgid "The mechanics of an era"
msgstr ""

#: ../../theory/highway.rst:326
msgid "The vision"
msgstr ""

#: ../../theory/highway.rst:328
msgid "Eras constitute the platform on which two mechanisms work:"
msgstr ""

#: ../../theory/highway.rst:330
msgid "validators rotation (= bonding/unbonding)"
msgstr ""

#: ../../theory/highway.rst:331
msgid "leaders sequence"
msgstr ""

#: ../../theory/highway.rst:333
msgid "Within a single era:"
msgstr ""

#: ../../theory/highway.rst:335
msgid "the weights map is fixed"
msgstr ""

#: ../../theory/highway.rst:336
msgid ""
"the leaders selection functions (assigning a leader to every tick) is "
"fixed"
msgstr ""

#: ../../theory/highway.rst:338
msgid ""
"An era starts at fixed point of real time (fixed tick). We generally "
"expect that:"
msgstr ""

#: ../../theory/highway.rst:340
msgid ""
"1. The weights map to be used in this era is defined by a booking block "
"from :math:`era\\_delay` rounds ago. 2. The random seed to be used in "
"this era is defined by a key block from :math:`era\\_delay` rounds ago."
msgstr ""

#: ../../theory/highway.rst:345
msgid ""
"Both :math:`era\\_delay` is a blockchain parameter. We expect that "
"reasonable value for :math:`era\\_delay` is 2."
msgstr ""

#: ../../theory/highway.rst:349
msgid "Setting the weights map"
msgstr ""

#: ../../theory/highway.rst:351
msgid ""
"Just take weights map as defined in the post-state of the corresponding "
"booking block."
msgstr ""

#: ../../theory/highway.rst:354
msgid "Setting the random seed for leaders sequence generator"
msgstr ""

#: ../../theory/highway.rst:356
msgid ""
"Take the hash of corresponding key-block, then add all magic bits from "
"main-tree path-of-blocks between the booking block and the key block "
"(both from the same era)."
msgstr ""

#: ../../theory/highway.rst:361
msgid "Disparation of eras"
msgstr ""

#: ../../theory/highway.rst:363
msgid ""
"In an era we typically will observe many booking blocks and key blocks, "
"just because the main-tree is typically not a chain. The expectation here"
" is that the combination of :math:`era\\_delay` and :math:`key\\_point` "
"together make enough time between the key block and the beginning of the "
"era it defines, that the LFB chain of a reasonably strong finalizer will "
"do the selection of only one “official” key block."
msgstr ""

#: ../../theory/highway.rst:370
msgid "Let us do a simple calculations:"
msgstr ""

#: ../../theory/highway.rst:372
msgid ""
"Assuming the era length is set to one week - starting Monday and ending "
"Sunday - and the key point is set to Thursday noon. Also, assume that "
"“era\\_delay” is 2. This means that key blocks created just after "
"Thursday noon will control the era that will start 10.5 days later. This "
"is plenty of time and by that time it is “almost sure” that the "
"progressing LFB chain will"
msgstr ""

#: ../../theory/highway.rst:377
msgid "pick the “right” key block to be used."
msgstr ""

#: ../../theory/highway.rst:379
msgid ""
"In the extreme case, however, the finality of the key block might not be "
"there at the moment of starting the era to be controlled by this block. "
"This"
msgstr ""

#: ../../theory/highway.rst:381
msgid ""
"is an interesting situation that actually can be handled, although this "
"is to happen in a “shocking” way. The way to go is to run in parallel all"
" possible eras - accordingly to all key blocks that are “on the table”. "
"Of course, these parallel eras must be run as if they are completely "
"independent blockchains (= separate P2p networks). Eventually, the "
"progressing LFB chain will materialize only one reality, and so all the "
"other virtual eras must disappear, so validators will just forget they "
"ever existed. This is exactly like in quantum mechanics, where at some "
"point only one version of reality is materializing."
msgstr ""

