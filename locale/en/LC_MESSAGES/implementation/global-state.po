# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../implementation/global-state.rst:4
msgid "Global State"
msgstr ""

#: ../../implementation/global-state.rst:9
msgid "Introduction"
msgstr ""

#: ../../implementation/global-state.rst:11
msgid ""
"The “global state” is the storage layer for the blockchain. All accounts,"
" contracts, and any associated data they have are stored in the global "
"state. Our global state has the semantics of a key-value store (with "
"additional permissions logic since not all users can access all values in"
" the same way). Refer to :ref:`Keys and Permissions <serialization-"
"standard-state-keys>` for further information on keys. Each block causes "
"changes to this global state because of the execution of the deploys it "
"contains. For validators to efficiently judge the correctness of these "
"changes, information about the new state needs to be communicated "
"succinctly. Moreover, we need to communicate pieces of the global state "
"to users while allowing them to verify the correctness of the parts they "
"receive. For these reasons, the key-value store is implemented as a "
":ref:`Merkle trie <global-state-trie>`."
msgstr ""

#: ../../implementation/global-state.rst:26
msgid "Merkle trie structure"
msgstr ""

#: ../../implementation/global-state.rst:28
msgid ""
"At a high level, a Merkle trie is a key-value store data structure that "
"can be shared piece-wise in a verifiable way (via a construction called a"
" Merkle proof). Each node is labeled by the hash of its data. Leaf nodes "
"are labeled with the hash of their data. Non-leaf nodes are labeled with "
"the hash of the labels of their child nodes."
msgstr ""

#: ../../implementation/global-state.rst:31
msgid ""
"Our implementation of the trie has radix of 256, meaning each branch node"
" can have up to 256 children. A path through the tree can be an array of "
"bytes, and serialization directly links a key with a path through the "
"tree as its associated value."
msgstr ""

#: ../../implementation/global-state.rst:33
msgid "Formally, a trie node is one of the following:"
msgstr ""

#: ../../implementation/global-state.rst:35
msgid "a leaf, which includes a key and a value"
msgstr ""

#: ../../implementation/global-state.rst:36
msgid ""
"a branch, which has up to 256 ``blake2b256`` hashes, pointing to up to "
"256 other nodes in the trie (recall each node is labeled by its hash)"
msgstr ""

#: ../../implementation/global-state.rst:38
msgid ""
"an extension node, which includes a byte array (called the affix) and a "
"``blake2b256`` hash pointing to another node in the trie"
msgstr ""

#: ../../implementation/global-state.rst:41
msgid ""
"The purpose of the extension node is to allow path compression. Consider "
"an example where all keys use the same first four bytes for values in the"
" trie. In this case, it would be inefficient to traverse through four "
"branch nodes where there is only one choice; instead, the root node of "
"the trie could be an extension node with affix equal to those first four "
"bytes and pointer to the first non-trivial branch node."
msgstr ""

#: ../../implementation/global-state.rst:46
msgid "The rust implementation of our trie can be found on GitHub:"
msgstr ""

#: ../../implementation/global-state.rst:48
msgid ""
"`definition of the trie data structure <https://github.com/CasperLabs"
"/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie/mod.rs#L320>`_"
msgstr ""

#: ../../implementation/global-state.rst:49
msgid ""
"`reading from the trie <https://github.com/CasperLabs/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L37>`_"
msgstr ""

#: ../../implementation/global-state.rst:50
msgid ""
"`writing to the trie <https://github.com/CasperLabs/casper-"
"node/blob/cb1d20ad1ea6e245cd8237f9406885a1e785c669/execution_engine/src/storage/trie_store/operations/mod.rs#L638>`_"
msgstr ""

#: ../../implementation/global-state.rst:52
msgid ""
"Note: Conceptually, each block has its trie because the state changes "
"based on the deploys it contains. For this reason, our implementation has"
" a notion of a ``TrieStore``, which allows us to look up the root node "
"for each trie."
msgstr ""

