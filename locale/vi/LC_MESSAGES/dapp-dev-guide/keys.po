# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, CasperLabs LLC
# This file is distributed under the same license as the CasperLabs Tech
# Spec package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
# 
# Translators:
# Quang Huy Tran <tqhuy2018@gmail.com>, 2021
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: CasperLabs Tech Spec\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-06-26 20:13+0000\n"
"PO-Revision-Date: 2021-06-26 21:46+0000\n"
"Last-Translator: Quang Huy Tran <tqhuy2018@gmail.com>, 2021\n"
"Language-Team: Vietnamese (https://www.transifex.com/caspernetwork/teams/122124/vi/)\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"
"Language: vi\n"
"Plural-Forms: nplurals=1; plural=0;\n"

#: ../../dapp-dev-guide/keys.rst:2
msgid "Working with Cryptographic Keys"
msgstr "Làm việc với các khoá mật mã"

#: ../../dapp-dev-guide/keys.rst:4
msgid ""
"The Casper platform supports two types of signatures for creating accounts "
"and signing transactions: ``secp256k1`` and ``ed25519``. You can generate "
"keys using the Casper client in both formats. It is also possible to work "
"with existing Ethereum keys."
msgstr ""
"Nền tảng Casper hỗ trợ hai loại chữ ký để tạo tài khoản và ký giao dịch: "
"``secp256k1`` và ``ed25519``. Bạn có thể tạo khóa bằng ứng dụng khách Casper"
" ở cả hai định dạng. Nó cũng có thể làm việc với các khóa Ethereum hiện có."

#: ../../dapp-dev-guide/keys.rst:7
msgid "Key Generation"
msgstr "Thế hệ khoá"

#: ../../dapp-dev-guide/keys.rst:10
msgid "Ethereum Keys"
msgstr "Các khoá Ethereum"

#: ../../dapp-dev-guide/keys.rst:11
msgid ""
"To create ``secp256k1`` keys, commonly known as Ethereum keys, follow these "
"steps:"
msgstr ""
"Để tạo mới khóa ``secp256k1``, thường được gọi là khóa Ethereum, hãy làm "
"theo các bước sau:"

#: ../../dapp-dev-guide/keys.rst:26
msgid ""
"Looking at the public-key-hex file, we see that ``secp256k1`` public hex "
"keys start with `02` in Casper:"
msgstr ""
"Nhìn vào tệp public-key-hex, chúng ta thấy rằng khóa hex công khai "
"``secp256k1`` bắt đầu bằng `02` trong Casper:"

#: ../../dapp-dev-guide/keys.rst:35
msgid "EdDSA Keys"
msgstr "Các khoá EdDSA"

#: ../../dapp-dev-guide/keys.rst:36
msgid ""
"It is also possible to create ``ed25519`` keys, which use the Edwards-curve "
"Digital Signature Algorithm (EdDSA). To generate EdDSA keys, follow these "
"steps:"
msgstr ""
"Cũng có thể tạo các khóa ``ed25519``, sử dụng Thuật toán chữ ký kỹ thuật số "
"đường cong Edwards (EdDSA). Để tạo khóa EdDSA, hãy làm theo các bước sau:"

#: ../../dapp-dev-guide/keys.rst:51
msgid ""
"Looking at the public-key-hex file, we see that keys of this type are pre-"
"pended with `01`:"
msgstr ""
"Nhìn vào tệp public-key-hex, chúng ta thấy rằng các khóa thuộc loại này được"
" thêm sẵn `01`:"

#: ../../dapp-dev-guide/keys.rst:60
msgid "Working with Existing Ethereum Keys"
msgstr "Làm việc với khác khoá Ethereum đã có"

#: ../../dapp-dev-guide/keys.rst:62
msgid ""
"It is also possible to use existing Ethereum keys in Casper. Here is an "
"example set of Ethereum keys and their corresponding address:"
msgstr ""
"Cũng có thể sử dụng các khóa Ethereum hiện có trong Casper. Dưới đây là một "
"tập hợp ví dụ về các khóa Ethereum và địa chỉ tương ứng của chúng:"

#: ../../dapp-dev-guide/keys.rst:70
msgid ""
"To use existing Ethereum keys, the Casper VM  needs to know that the key is "
"a ``secp256k1`` type."
msgstr ""
"Để sử dụng các khóa Ethereum hiện có, máy ảo Casper cần biết rằng khóa là "
"loại ``secp256k1``."

#: ../../dapp-dev-guide/keys.rst:72
msgid ""
"The Rust `casper-client` provides an example of how this works. Pre-pending "
"the public key with a `02` indicates the key is a ``secp256k1`` key."
msgstr ""
"Rust `casper-client` cung cấp một ví dụ về cách hoạt động của nó. Khóa công "
"khai bắt đầu với `02` cho biết khóa đó là khóa ``secp256k1``."

#: ../../dapp-dev-guide/keys.rst:74
msgid "**Example**:"
msgstr "**Ví dụ**:"

#: ../../dapp-dev-guide/keys.rst:76
msgid "The following transaction sends 100 CSPR."
msgstr "Giao dịch sau gửi 100 CSPR."

#: ../../dapp-dev-guide/keys.rst:82
msgid ""
"The Rust `casper-client` requires the secret key to be in `PEM` format to "
"send a transaction from this account. If you want to use existing Ethereum "
"keys with the Rust client, a conversion to `PEM` format is needed."
msgstr ""
"Rust `casper-client` yêu cầu khóa bí mật ở định dạng `PEM` để gửi giao dịch "
"từ tài khoản này. Nếu bạn muốn sử dụng các khóa Ethereum hiện có với ứng "
"dụng khách Rust, cần chuyển đổi sang định dạng `PEM`."

#: ../../dapp-dev-guide/keys.rst:84
msgid ""
"The following example is a JS script that generates a `PEM` file, using `key"
" encoder <https://github.com/blockstack/key-encoder-js>`_ and node.js. To "
"install these components, do the following:"
msgstr ""
"Ví dụ sau là một tập lệnh JS script tạo tệp `PEM`, sử dụng `key encoder "
"<https://github.com/blockstack/key-encoder-js>`_ và node.js. Để cài đặt các "
"thành phần này, hãy làm như sau:"

#: ../../dapp-dev-guide/keys.rst:92
msgid ""
"Then create the JS script ``convert-to-pem.js`` using `vi` or `nano` and "
"include this content:"
msgstr ""
"Sau đó, tạo tập lệnh JS script ``convert-to-pem.js`` bằng cách sử dụng `vi` "
"hoặc` nano` và đưa vào nội dung này:"

#: ../../dapp-dev-guide/keys.rst:102
msgid ""
"Then run the script using node.js. Name the secret key something different."
msgstr ""
"Sau đó, chạy script bằng cách sử dụng node.js. Đặt tên khác cho khóa bí mật."

#: ../../dapp-dev-guide/keys.rst:108
msgid "To view the secret key, use `cat`:"
msgstr "Để xem khoá bí mật, sử dụng `cat`:"
